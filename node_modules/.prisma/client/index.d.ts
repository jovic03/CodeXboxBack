
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Jogo
 * 
 */
export type Jogo = {
  id: string
  title: string
  coverImageUrl: string
  description: string
  year: string
  imdbScore: string
  trailerYouTubeUrl: string
  gameplayYouTubeUrl: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Genero
 * 
 */
export type Genero = {
  id: string
  genero: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string
  email: string
  password: string
  cpf: string
  isAdmin: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Profiles
 * 
 */
export type Profiles = {
  id: string
  title: string
  ImageURL: string
  userId: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model JogosFavoritos
 * 
 */
export type JogosFavoritos = {
  id: string
  perfilId: string
  jogoId: string
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Jogos
 * const jogos = await prisma.jogo.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Jogos
   * const jogos = await prisma.jogo.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.jogo`: Exposes CRUD operations for the **Jogo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jogos
    * const jogos = await prisma.jogo.findMany()
    * ```
    */
  get jogo(): Prisma.JogoDelegate<GlobalReject>;

  /**
   * `prisma.genero`: Exposes CRUD operations for the **Genero** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Generos
    * const generos = await prisma.genero.findMany()
    * ```
    */
  get genero(): Prisma.GeneroDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.profiles`: Exposes CRUD operations for the **Profiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profiles.findMany()
    * ```
    */
  get profiles(): Prisma.ProfilesDelegate<GlobalReject>;

  /**
   * `prisma.jogosFavoritos`: Exposes CRUD operations for the **JogosFavoritos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JogosFavoritos
    * const jogosFavoritos = await prisma.jogosFavoritos.findMany()
    * ```
    */
  get jogosFavoritos(): Prisma.JogosFavoritosDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.0
   * Query Engine version: b9297dc3a59307060c1c39d7e4f5765066f38372
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Jogo: 'Jogo',
    Genero: 'Genero',
    User: 'User',
    Profiles: 'Profiles',
    JogosFavoritos: 'JogosFavoritos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type JogoCountOutputType
   */


  export type JogoCountOutputType = {
    genero: number
    Profiles: number
    jogoFavorito: number
  }

  export type JogoCountOutputTypeSelect = {
    genero?: boolean
    Profiles?: boolean
    jogoFavorito?: boolean
  }

  export type JogoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | JogoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? JogoCountOutputType
    : S extends undefined
    ? never
    : S extends JogoCountOutputTypeArgs
    ?'include' extends U
    ? JogoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof JogoCountOutputType ? JogoCountOutputType[P] : never
  } 
    : JogoCountOutputType
  : JogoCountOutputType




  // Custom InputTypes

  /**
   * JogoCountOutputType without action
   */
  export type JogoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the JogoCountOutputType
     * 
    **/
    select?: JogoCountOutputTypeSelect | null
  }



  /**
   * Count Type GeneroCountOutputType
   */


  export type GeneroCountOutputType = {
    jogos: number
  }

  export type GeneroCountOutputTypeSelect = {
    jogos?: boolean
  }

  export type GeneroCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GeneroCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GeneroCountOutputType
    : S extends undefined
    ? never
    : S extends GeneroCountOutputTypeArgs
    ?'include' extends U
    ? GeneroCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GeneroCountOutputType ? GeneroCountOutputType[P] : never
  } 
    : GeneroCountOutputType
  : GeneroCountOutputType




  // Custom InputTypes

  /**
   * GeneroCountOutputType without action
   */
  export type GeneroCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GeneroCountOutputType
     * 
    **/
    select?: GeneroCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Profiles: number
  }

  export type UserCountOutputTypeSelect = {
    Profiles?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ProfilesCountOutputType
   */


  export type ProfilesCountOutputType = {
    jogos: number
    jogoFavorito: number
  }

  export type ProfilesCountOutputTypeSelect = {
    jogos?: boolean
    jogoFavorito?: boolean
  }

  export type ProfilesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProfilesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProfilesCountOutputType
    : S extends undefined
    ? never
    : S extends ProfilesCountOutputTypeArgs
    ?'include' extends U
    ? ProfilesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProfilesCountOutputType ? ProfilesCountOutputType[P] : never
  } 
    : ProfilesCountOutputType
  : ProfilesCountOutputType




  // Custom InputTypes

  /**
   * ProfilesCountOutputType without action
   */
  export type ProfilesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProfilesCountOutputType
     * 
    **/
    select?: ProfilesCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Jogo
   */


  export type AggregateJogo = {
    _count: JogoCountAggregateOutputType | null
    _min: JogoMinAggregateOutputType | null
    _max: JogoMaxAggregateOutputType | null
  }

  export type JogoMinAggregateOutputType = {
    id: string | null
    title: string | null
    coverImageUrl: string | null
    description: string | null
    year: string | null
    imdbScore: string | null
    trailerYouTubeUrl: string | null
    gameplayYouTubeUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JogoMaxAggregateOutputType = {
    id: string | null
    title: string | null
    coverImageUrl: string | null
    description: string | null
    year: string | null
    imdbScore: string | null
    trailerYouTubeUrl: string | null
    gameplayYouTubeUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JogoCountAggregateOutputType = {
    id: number
    title: number
    coverImageUrl: number
    description: number
    year: number
    imdbScore: number
    trailerYouTubeUrl: number
    gameplayYouTubeUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JogoMinAggregateInputType = {
    id?: true
    title?: true
    coverImageUrl?: true
    description?: true
    year?: true
    imdbScore?: true
    trailerYouTubeUrl?: true
    gameplayYouTubeUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JogoMaxAggregateInputType = {
    id?: true
    title?: true
    coverImageUrl?: true
    description?: true
    year?: true
    imdbScore?: true
    trailerYouTubeUrl?: true
    gameplayYouTubeUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JogoCountAggregateInputType = {
    id?: true
    title?: true
    coverImageUrl?: true
    description?: true
    year?: true
    imdbScore?: true
    trailerYouTubeUrl?: true
    gameplayYouTubeUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JogoAggregateArgs = {
    /**
     * Filter which Jogo to aggregate.
     * 
    **/
    where?: JogoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogos to fetch.
     * 
    **/
    orderBy?: Enumerable<JogoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: JogoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jogos
    **/
    _count?: true | JogoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JogoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JogoMaxAggregateInputType
  }

  export type GetJogoAggregateType<T extends JogoAggregateArgs> = {
        [P in keyof T & keyof AggregateJogo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJogo[P]>
      : GetScalarType<T[P], AggregateJogo[P]>
  }




  export type JogoGroupByArgs = {
    where?: JogoWhereInput
    orderBy?: Enumerable<JogoOrderByWithAggregationInput>
    by: Array<JogoScalarFieldEnum>
    having?: JogoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JogoCountAggregateInputType | true
    _min?: JogoMinAggregateInputType
    _max?: JogoMaxAggregateInputType
  }


  export type JogoGroupByOutputType = {
    id: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    createdAt: Date
    updatedAt: Date
    _count: JogoCountAggregateOutputType | null
    _min: JogoMinAggregateOutputType | null
    _max: JogoMaxAggregateOutputType | null
  }

  type GetJogoGroupByPayload<T extends JogoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<JogoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JogoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JogoGroupByOutputType[P]>
            : GetScalarType<T[P], JogoGroupByOutputType[P]>
        }
      >
    >


  export type JogoSelect = {
    id?: boolean
    title?: boolean
    coverImageUrl?: boolean
    description?: boolean
    year?: boolean
    imdbScore?: boolean
    trailerYouTubeUrl?: boolean
    gameplayYouTubeUrl?: boolean
    genero?: boolean | GeneroFindManyArgs
    Profiles?: boolean | ProfilesFindManyArgs
    jogoFavorito?: boolean | JogosFavoritosFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | JogoCountOutputTypeArgs
  }

  export type JogoInclude = {
    genero?: boolean | GeneroFindManyArgs
    Profiles?: boolean | ProfilesFindManyArgs
    jogoFavorito?: boolean | JogosFavoritosFindManyArgs
    _count?: boolean | JogoCountOutputTypeArgs
  }

  export type JogoGetPayload<
    S extends boolean | null | undefined | JogoArgs,
    U = keyof S
      > = S extends true
        ? Jogo
    : S extends undefined
    ? never
    : S extends JogoArgs | JogoFindManyArgs
    ?'include' extends U
    ? Jogo  & {
    [P in TrueKeys<S['include']>]:
        P extends 'genero' ? Array < GeneroGetPayload<S['include'][P]>>  :
        P extends 'Profiles' ? Array < ProfilesGetPayload<S['include'][P]>>  :
        P extends 'jogoFavorito' ? Array < JogosFavoritosGetPayload<S['include'][P]>>  :
        P extends '_count' ? JogoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'genero' ? Array < GeneroGetPayload<S['select'][P]>>  :
        P extends 'Profiles' ? Array < ProfilesGetPayload<S['select'][P]>>  :
        P extends 'jogoFavorito' ? Array < JogosFavoritosGetPayload<S['select'][P]>>  :
        P extends '_count' ? JogoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Jogo ? Jogo[P] : never
  } 
    : Jogo
  : Jogo


  type JogoCountArgs = Merge<
    Omit<JogoFindManyArgs, 'select' | 'include'> & {
      select?: JogoCountAggregateInputType | true
    }
  >

  export interface JogoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Jogo that matches the filter.
     * @param {JogoFindUniqueArgs} args - Arguments to find a Jogo
     * @example
     * // Get one Jogo
     * const jogo = await prisma.jogo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JogoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JogoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Jogo'> extends True ? CheckSelect<T, Prisma__JogoClient<Jogo>, Prisma__JogoClient<JogoGetPayload<T>>> : CheckSelect<T, Prisma__JogoClient<Jogo | null >, Prisma__JogoClient<JogoGetPayload<T> | null >>

    /**
     * Find the first Jogo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoFindFirstArgs} args - Arguments to find a Jogo
     * @example
     * // Get one Jogo
     * const jogo = await prisma.jogo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JogoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JogoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Jogo'> extends True ? CheckSelect<T, Prisma__JogoClient<Jogo>, Prisma__JogoClient<JogoGetPayload<T>>> : CheckSelect<T, Prisma__JogoClient<Jogo | null >, Prisma__JogoClient<JogoGetPayload<T> | null >>

    /**
     * Find zero or more Jogos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jogos
     * const jogos = await prisma.jogo.findMany()
     * 
     * // Get first 10 Jogos
     * const jogos = await prisma.jogo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jogoWithIdOnly = await prisma.jogo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JogoFindManyArgs>(
      args?: SelectSubset<T, JogoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Jogo>>, PrismaPromise<Array<JogoGetPayload<T>>>>

    /**
     * Create a Jogo.
     * @param {JogoCreateArgs} args - Arguments to create a Jogo.
     * @example
     * // Create one Jogo
     * const Jogo = await prisma.jogo.create({
     *   data: {
     *     // ... data to create a Jogo
     *   }
     * })
     * 
    **/
    create<T extends JogoCreateArgs>(
      args: SelectSubset<T, JogoCreateArgs>
    ): CheckSelect<T, Prisma__JogoClient<Jogo>, Prisma__JogoClient<JogoGetPayload<T>>>

    /**
     * Create many Jogos.
     *     @param {JogoCreateManyArgs} args - Arguments to create many Jogos.
     *     @example
     *     // Create many Jogos
     *     const jogo = await prisma.jogo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JogoCreateManyArgs>(
      args?: SelectSubset<T, JogoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Jogo.
     * @param {JogoDeleteArgs} args - Arguments to delete one Jogo.
     * @example
     * // Delete one Jogo
     * const Jogo = await prisma.jogo.delete({
     *   where: {
     *     // ... filter to delete one Jogo
     *   }
     * })
     * 
    **/
    delete<T extends JogoDeleteArgs>(
      args: SelectSubset<T, JogoDeleteArgs>
    ): CheckSelect<T, Prisma__JogoClient<Jogo>, Prisma__JogoClient<JogoGetPayload<T>>>

    /**
     * Update one Jogo.
     * @param {JogoUpdateArgs} args - Arguments to update one Jogo.
     * @example
     * // Update one Jogo
     * const jogo = await prisma.jogo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JogoUpdateArgs>(
      args: SelectSubset<T, JogoUpdateArgs>
    ): CheckSelect<T, Prisma__JogoClient<Jogo>, Prisma__JogoClient<JogoGetPayload<T>>>

    /**
     * Delete zero or more Jogos.
     * @param {JogoDeleteManyArgs} args - Arguments to filter Jogos to delete.
     * @example
     * // Delete a few Jogos
     * const { count } = await prisma.jogo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JogoDeleteManyArgs>(
      args?: SelectSubset<T, JogoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jogos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jogos
     * const jogo = await prisma.jogo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JogoUpdateManyArgs>(
      args: SelectSubset<T, JogoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Jogo.
     * @param {JogoUpsertArgs} args - Arguments to update or create a Jogo.
     * @example
     * // Update or create a Jogo
     * const jogo = await prisma.jogo.upsert({
     *   create: {
     *     // ... data to create a Jogo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jogo we want to update
     *   }
     * })
    **/
    upsert<T extends JogoUpsertArgs>(
      args: SelectSubset<T, JogoUpsertArgs>
    ): CheckSelect<T, Prisma__JogoClient<Jogo>, Prisma__JogoClient<JogoGetPayload<T>>>

    /**
     * Count the number of Jogos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoCountArgs} args - Arguments to filter Jogos to count.
     * @example
     * // Count the number of Jogos
     * const count = await prisma.jogo.count({
     *   where: {
     *     // ... the filter for the Jogos we want to count
     *   }
     * })
    **/
    count<T extends JogoCountArgs>(
      args?: Subset<T, JogoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JogoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jogo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JogoAggregateArgs>(args: Subset<T, JogoAggregateArgs>): PrismaPromise<GetJogoAggregateType<T>>

    /**
     * Group by Jogo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JogoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JogoGroupByArgs['orderBy'] }
        : { orderBy?: JogoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JogoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJogoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jogo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JogoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    genero<T extends GeneroFindManyArgs = {}>(args?: Subset<T, GeneroFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Genero>>, PrismaPromise<Array<GeneroGetPayload<T>>>>;

    Profiles<T extends ProfilesFindManyArgs = {}>(args?: Subset<T, ProfilesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Profiles>>, PrismaPromise<Array<ProfilesGetPayload<T>>>>;

    jogoFavorito<T extends JogosFavoritosFindManyArgs = {}>(args?: Subset<T, JogosFavoritosFindManyArgs>): CheckSelect<T, PrismaPromise<Array<JogosFavoritos>>, PrismaPromise<Array<JogosFavoritosGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Jogo findUnique
   */
  export type JogoFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Jogo
     * 
    **/
    select?: JogoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogoInclude | null
    /**
     * Throw an Error if a Jogo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Jogo to fetch.
     * 
    **/
    where: JogoWhereUniqueInput
  }


  /**
   * Jogo findFirst
   */
  export type JogoFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Jogo
     * 
    **/
    select?: JogoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogoInclude | null
    /**
     * Throw an Error if a Jogo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Jogo to fetch.
     * 
    **/
    where?: JogoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogos to fetch.
     * 
    **/
    orderBy?: Enumerable<JogoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jogos.
     * 
    **/
    cursor?: JogoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jogos.
     * 
    **/
    distinct?: Enumerable<JogoScalarFieldEnum>
  }


  /**
   * Jogo findMany
   */
  export type JogoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Jogo
     * 
    **/
    select?: JogoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogoInclude | null
    /**
     * Filter, which Jogos to fetch.
     * 
    **/
    where?: JogoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogos to fetch.
     * 
    **/
    orderBy?: Enumerable<JogoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jogos.
     * 
    **/
    cursor?: JogoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<JogoScalarFieldEnum>
  }


  /**
   * Jogo create
   */
  export type JogoCreateArgs = {
    /**
     * Select specific fields to fetch from the Jogo
     * 
    **/
    select?: JogoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogoInclude | null
    /**
     * The data needed to create a Jogo.
     * 
    **/
    data: XOR<JogoCreateInput, JogoUncheckedCreateInput>
  }


  /**
   * Jogo createMany
   */
  export type JogoCreateManyArgs = {
    /**
     * The data used to create many Jogos.
     * 
    **/
    data: Enumerable<JogoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Jogo update
   */
  export type JogoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Jogo
     * 
    **/
    select?: JogoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogoInclude | null
    /**
     * The data needed to update a Jogo.
     * 
    **/
    data: XOR<JogoUpdateInput, JogoUncheckedUpdateInput>
    /**
     * Choose, which Jogo to update.
     * 
    **/
    where: JogoWhereUniqueInput
  }


  /**
   * Jogo updateMany
   */
  export type JogoUpdateManyArgs = {
    /**
     * The data used to update Jogos.
     * 
    **/
    data: XOR<JogoUpdateManyMutationInput, JogoUncheckedUpdateManyInput>
    /**
     * Filter which Jogos to update
     * 
    **/
    where?: JogoWhereInput
  }


  /**
   * Jogo upsert
   */
  export type JogoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Jogo
     * 
    **/
    select?: JogoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogoInclude | null
    /**
     * The filter to search for the Jogo to update in case it exists.
     * 
    **/
    where: JogoWhereUniqueInput
    /**
     * In case the Jogo found by the `where` argument doesn't exist, create a new Jogo with this data.
     * 
    **/
    create: XOR<JogoCreateInput, JogoUncheckedCreateInput>
    /**
     * In case the Jogo was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<JogoUpdateInput, JogoUncheckedUpdateInput>
  }


  /**
   * Jogo delete
   */
  export type JogoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Jogo
     * 
    **/
    select?: JogoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogoInclude | null
    /**
     * Filter which Jogo to delete.
     * 
    **/
    where: JogoWhereUniqueInput
  }


  /**
   * Jogo deleteMany
   */
  export type JogoDeleteManyArgs = {
    /**
     * Filter which Jogos to delete
     * 
    **/
    where?: JogoWhereInput
  }


  /**
   * Jogo without action
   */
  export type JogoArgs = {
    /**
     * Select specific fields to fetch from the Jogo
     * 
    **/
    select?: JogoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogoInclude | null
  }



  /**
   * Model Genero
   */


  export type AggregateGenero = {
    _count: GeneroCountAggregateOutputType | null
    _min: GeneroMinAggregateOutputType | null
    _max: GeneroMaxAggregateOutputType | null
  }

  export type GeneroMinAggregateOutputType = {
    id: string | null
    genero: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeneroMaxAggregateOutputType = {
    id: string | null
    genero: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeneroCountAggregateOutputType = {
    id: number
    genero: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GeneroMinAggregateInputType = {
    id?: true
    genero?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeneroMaxAggregateInputType = {
    id?: true
    genero?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeneroCountAggregateInputType = {
    id?: true
    genero?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GeneroAggregateArgs = {
    /**
     * Filter which Genero to aggregate.
     * 
    **/
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     * 
    **/
    orderBy?: Enumerable<GeneroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Generos
    **/
    _count?: true | GeneroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneroMaxAggregateInputType
  }

  export type GetGeneroAggregateType<T extends GeneroAggregateArgs> = {
        [P in keyof T & keyof AggregateGenero]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenero[P]>
      : GetScalarType<T[P], AggregateGenero[P]>
  }




  export type GeneroGroupByArgs = {
    where?: GeneroWhereInput
    orderBy?: Enumerable<GeneroOrderByWithAggregationInput>
    by: Array<GeneroScalarFieldEnum>
    having?: GeneroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneroCountAggregateInputType | true
    _min?: GeneroMinAggregateInputType
    _max?: GeneroMaxAggregateInputType
  }


  export type GeneroGroupByOutputType = {
    id: string
    genero: string
    createdAt: Date
    updatedAt: Date
    _count: GeneroCountAggregateOutputType | null
    _min: GeneroMinAggregateOutputType | null
    _max: GeneroMaxAggregateOutputType | null
  }

  type GetGeneroGroupByPayload<T extends GeneroGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GeneroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneroGroupByOutputType[P]>
            : GetScalarType<T[P], GeneroGroupByOutputType[P]>
        }
      >
    >


  export type GeneroSelect = {
    id?: boolean
    genero?: boolean
    jogos?: boolean | JogoFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | GeneroCountOutputTypeArgs
  }

  export type GeneroInclude = {
    jogos?: boolean | JogoFindManyArgs
    _count?: boolean | GeneroCountOutputTypeArgs
  }

  export type GeneroGetPayload<
    S extends boolean | null | undefined | GeneroArgs,
    U = keyof S
      > = S extends true
        ? Genero
    : S extends undefined
    ? never
    : S extends GeneroArgs | GeneroFindManyArgs
    ?'include' extends U
    ? Genero  & {
    [P in TrueKeys<S['include']>]:
        P extends 'jogos' ? Array < JogoGetPayload<S['include'][P]>>  :
        P extends '_count' ? GeneroCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'jogos' ? Array < JogoGetPayload<S['select'][P]>>  :
        P extends '_count' ? GeneroCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Genero ? Genero[P] : never
  } 
    : Genero
  : Genero


  type GeneroCountArgs = Merge<
    Omit<GeneroFindManyArgs, 'select' | 'include'> & {
      select?: GeneroCountAggregateInputType | true
    }
  >

  export interface GeneroDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Genero that matches the filter.
     * @param {GeneroFindUniqueArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GeneroFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GeneroFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Genero'> extends True ? CheckSelect<T, Prisma__GeneroClient<Genero>, Prisma__GeneroClient<GeneroGetPayload<T>>> : CheckSelect<T, Prisma__GeneroClient<Genero | null >, Prisma__GeneroClient<GeneroGetPayload<T> | null >>

    /**
     * Find the first Genero that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroFindFirstArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GeneroFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GeneroFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Genero'> extends True ? CheckSelect<T, Prisma__GeneroClient<Genero>, Prisma__GeneroClient<GeneroGetPayload<T>>> : CheckSelect<T, Prisma__GeneroClient<Genero | null >, Prisma__GeneroClient<GeneroGetPayload<T> | null >>

    /**
     * Find zero or more Generos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Generos
     * const generos = await prisma.genero.findMany()
     * 
     * // Get first 10 Generos
     * const generos = await prisma.genero.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generoWithIdOnly = await prisma.genero.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GeneroFindManyArgs>(
      args?: SelectSubset<T, GeneroFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Genero>>, PrismaPromise<Array<GeneroGetPayload<T>>>>

    /**
     * Create a Genero.
     * @param {GeneroCreateArgs} args - Arguments to create a Genero.
     * @example
     * // Create one Genero
     * const Genero = await prisma.genero.create({
     *   data: {
     *     // ... data to create a Genero
     *   }
     * })
     * 
    **/
    create<T extends GeneroCreateArgs>(
      args: SelectSubset<T, GeneroCreateArgs>
    ): CheckSelect<T, Prisma__GeneroClient<Genero>, Prisma__GeneroClient<GeneroGetPayload<T>>>

    /**
     * Create many Generos.
     *     @param {GeneroCreateManyArgs} args - Arguments to create many Generos.
     *     @example
     *     // Create many Generos
     *     const genero = await prisma.genero.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GeneroCreateManyArgs>(
      args?: SelectSubset<T, GeneroCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Genero.
     * @param {GeneroDeleteArgs} args - Arguments to delete one Genero.
     * @example
     * // Delete one Genero
     * const Genero = await prisma.genero.delete({
     *   where: {
     *     // ... filter to delete one Genero
     *   }
     * })
     * 
    **/
    delete<T extends GeneroDeleteArgs>(
      args: SelectSubset<T, GeneroDeleteArgs>
    ): CheckSelect<T, Prisma__GeneroClient<Genero>, Prisma__GeneroClient<GeneroGetPayload<T>>>

    /**
     * Update one Genero.
     * @param {GeneroUpdateArgs} args - Arguments to update one Genero.
     * @example
     * // Update one Genero
     * const genero = await prisma.genero.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GeneroUpdateArgs>(
      args: SelectSubset<T, GeneroUpdateArgs>
    ): CheckSelect<T, Prisma__GeneroClient<Genero>, Prisma__GeneroClient<GeneroGetPayload<T>>>

    /**
     * Delete zero or more Generos.
     * @param {GeneroDeleteManyArgs} args - Arguments to filter Generos to delete.
     * @example
     * // Delete a few Generos
     * const { count } = await prisma.genero.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GeneroDeleteManyArgs>(
      args?: SelectSubset<T, GeneroDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Generos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Generos
     * const genero = await prisma.genero.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GeneroUpdateManyArgs>(
      args: SelectSubset<T, GeneroUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Genero.
     * @param {GeneroUpsertArgs} args - Arguments to update or create a Genero.
     * @example
     * // Update or create a Genero
     * const genero = await prisma.genero.upsert({
     *   create: {
     *     // ... data to create a Genero
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genero we want to update
     *   }
     * })
    **/
    upsert<T extends GeneroUpsertArgs>(
      args: SelectSubset<T, GeneroUpsertArgs>
    ): CheckSelect<T, Prisma__GeneroClient<Genero>, Prisma__GeneroClient<GeneroGetPayload<T>>>

    /**
     * Count the number of Generos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroCountArgs} args - Arguments to filter Generos to count.
     * @example
     * // Count the number of Generos
     * const count = await prisma.genero.count({
     *   where: {
     *     // ... the filter for the Generos we want to count
     *   }
     * })
    **/
    count<T extends GeneroCountArgs>(
      args?: Subset<T, GeneroCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneroAggregateArgs>(args: Subset<T, GeneroAggregateArgs>): PrismaPromise<GetGeneroAggregateType<T>>

    /**
     * Group by Genero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneroGroupByArgs['orderBy'] }
        : { orderBy?: GeneroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneroGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Genero.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GeneroClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    jogos<T extends JogoFindManyArgs = {}>(args?: Subset<T, JogoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Jogo>>, PrismaPromise<Array<JogoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Genero findUnique
   */
  export type GeneroFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Genero
     * 
    **/
    select?: GeneroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneroInclude | null
    /**
     * Throw an Error if a Genero can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Genero to fetch.
     * 
    **/
    where: GeneroWhereUniqueInput
  }


  /**
   * Genero findFirst
   */
  export type GeneroFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Genero
     * 
    **/
    select?: GeneroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneroInclude | null
    /**
     * Throw an Error if a Genero can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Genero to fetch.
     * 
    **/
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     * 
    **/
    orderBy?: Enumerable<GeneroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Generos.
     * 
    **/
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Generos.
     * 
    **/
    distinct?: Enumerable<GeneroScalarFieldEnum>
  }


  /**
   * Genero findMany
   */
  export type GeneroFindManyArgs = {
    /**
     * Select specific fields to fetch from the Genero
     * 
    **/
    select?: GeneroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneroInclude | null
    /**
     * Filter, which Generos to fetch.
     * 
    **/
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     * 
    **/
    orderBy?: Enumerable<GeneroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Generos.
     * 
    **/
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GeneroScalarFieldEnum>
  }


  /**
   * Genero create
   */
  export type GeneroCreateArgs = {
    /**
     * Select specific fields to fetch from the Genero
     * 
    **/
    select?: GeneroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneroInclude | null
    /**
     * The data needed to create a Genero.
     * 
    **/
    data: XOR<GeneroCreateInput, GeneroUncheckedCreateInput>
  }


  /**
   * Genero createMany
   */
  export type GeneroCreateManyArgs = {
    /**
     * The data used to create many Generos.
     * 
    **/
    data: Enumerable<GeneroCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Genero update
   */
  export type GeneroUpdateArgs = {
    /**
     * Select specific fields to fetch from the Genero
     * 
    **/
    select?: GeneroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneroInclude | null
    /**
     * The data needed to update a Genero.
     * 
    **/
    data: XOR<GeneroUpdateInput, GeneroUncheckedUpdateInput>
    /**
     * Choose, which Genero to update.
     * 
    **/
    where: GeneroWhereUniqueInput
  }


  /**
   * Genero updateMany
   */
  export type GeneroUpdateManyArgs = {
    /**
     * The data used to update Generos.
     * 
    **/
    data: XOR<GeneroUpdateManyMutationInput, GeneroUncheckedUpdateManyInput>
    /**
     * Filter which Generos to update
     * 
    **/
    where?: GeneroWhereInput
  }


  /**
   * Genero upsert
   */
  export type GeneroUpsertArgs = {
    /**
     * Select specific fields to fetch from the Genero
     * 
    **/
    select?: GeneroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneroInclude | null
    /**
     * The filter to search for the Genero to update in case it exists.
     * 
    **/
    where: GeneroWhereUniqueInput
    /**
     * In case the Genero found by the `where` argument doesn't exist, create a new Genero with this data.
     * 
    **/
    create: XOR<GeneroCreateInput, GeneroUncheckedCreateInput>
    /**
     * In case the Genero was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GeneroUpdateInput, GeneroUncheckedUpdateInput>
  }


  /**
   * Genero delete
   */
  export type GeneroDeleteArgs = {
    /**
     * Select specific fields to fetch from the Genero
     * 
    **/
    select?: GeneroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneroInclude | null
    /**
     * Filter which Genero to delete.
     * 
    **/
    where: GeneroWhereUniqueInput
  }


  /**
   * Genero deleteMany
   */
  export type GeneroDeleteManyArgs = {
    /**
     * Filter which Generos to delete
     * 
    **/
    where?: GeneroWhereInput
  }


  /**
   * Genero without action
   */
  export type GeneroArgs = {
    /**
     * Select specific fields to fetch from the Genero
     * 
    **/
    select?: GeneroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GeneroInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    cpf: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    cpf: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    cpf: number
    isAdmin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    cpf?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    cpf?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    cpf?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    cpf: string
    isAdmin: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    cpf?: boolean
    isAdmin?: boolean
    Profiles?: boolean | ProfilesFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    Profiles?: boolean | ProfilesFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Profiles' ? Array < ProfilesGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Profiles' ? Array < ProfilesGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Profiles<T extends ProfilesFindManyArgs = {}>(args?: Subset<T, ProfilesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Profiles>>, PrismaPromise<Array<ProfilesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Profiles
   */


  export type AggregateProfiles = {
    _count: ProfilesCountAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  export type ProfilesMinAggregateOutputType = {
    id: string | null
    title: string | null
    ImageURL: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfilesMaxAggregateOutputType = {
    id: string | null
    title: string | null
    ImageURL: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfilesCountAggregateOutputType = {
    id: number
    title: number
    ImageURL: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfilesMinAggregateInputType = {
    id?: true
    title?: true
    ImageURL?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfilesMaxAggregateInputType = {
    id?: true
    title?: true
    ImageURL?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfilesCountAggregateInputType = {
    id?: true
    title?: true
    ImageURL?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfilesAggregateArgs = {
    /**
     * Filter which Profiles to aggregate.
     * 
    **/
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilesMaxAggregateInputType
  }

  export type GetProfilesAggregateType<T extends ProfilesAggregateArgs> = {
        [P in keyof T & keyof AggregateProfiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfiles[P]>
      : GetScalarType<T[P], AggregateProfiles[P]>
  }




  export type ProfilesGroupByArgs = {
    where?: ProfilesWhereInput
    orderBy?: Enumerable<ProfilesOrderByWithAggregationInput>
    by: Array<ProfilesScalarFieldEnum>
    having?: ProfilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilesCountAggregateInputType | true
    _min?: ProfilesMinAggregateInputType
    _max?: ProfilesMaxAggregateInputType
  }


  export type ProfilesGroupByOutputType = {
    id: string
    title: string
    ImageURL: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: ProfilesCountAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  type GetProfilesGroupByPayload<T extends ProfilesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProfilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
        }
      >
    >


  export type ProfilesSelect = {
    id?: boolean
    title?: boolean
    ImageURL?: boolean
    User?: boolean | UserArgs
    userId?: boolean
    jogos?: boolean | JogoFindManyArgs
    jogoFavorito?: boolean | JogosFavoritosFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | ProfilesCountOutputTypeArgs
  }

  export type ProfilesInclude = {
    User?: boolean | UserArgs
    jogos?: boolean | JogoFindManyArgs
    jogoFavorito?: boolean | JogosFavoritosFindManyArgs
    _count?: boolean | ProfilesCountOutputTypeArgs
  }

  export type ProfilesGetPayload<
    S extends boolean | null | undefined | ProfilesArgs,
    U = keyof S
      > = S extends true
        ? Profiles
    : S extends undefined
    ? never
    : S extends ProfilesArgs | ProfilesFindManyArgs
    ?'include' extends U
    ? Profiles  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'jogos' ? Array < JogoGetPayload<S['include'][P]>>  :
        P extends 'jogoFavorito' ? Array < JogosFavoritosGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProfilesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'jogos' ? Array < JogoGetPayload<S['select'][P]>>  :
        P extends 'jogoFavorito' ? Array < JogosFavoritosGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProfilesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Profiles ? Profiles[P] : never
  } 
    : Profiles
  : Profiles


  type ProfilesCountArgs = Merge<
    Omit<ProfilesFindManyArgs, 'select' | 'include'> & {
      select?: ProfilesCountAggregateInputType | true
    }
  >

  export interface ProfilesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profiles that matches the filter.
     * @param {ProfilesFindUniqueArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfilesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfilesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profiles'> extends True ? CheckSelect<T, Prisma__ProfilesClient<Profiles>, Prisma__ProfilesClient<ProfilesGetPayload<T>>> : CheckSelect<T, Prisma__ProfilesClient<Profiles | null >, Prisma__ProfilesClient<ProfilesGetPayload<T> | null >>

    /**
     * Find the first Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindFirstArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfilesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfilesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profiles'> extends True ? CheckSelect<T, Prisma__ProfilesClient<Profiles>, Prisma__ProfilesClient<ProfilesGetPayload<T>>> : CheckSelect<T, Prisma__ProfilesClient<Profiles | null >, Prisma__ProfilesClient<ProfilesGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profiles.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profiles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilesWithIdOnly = await prisma.profiles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfilesFindManyArgs>(
      args?: SelectSubset<T, ProfilesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profiles>>, PrismaPromise<Array<ProfilesGetPayload<T>>>>

    /**
     * Create a Profiles.
     * @param {ProfilesCreateArgs} args - Arguments to create a Profiles.
     * @example
     * // Create one Profiles
     * const Profiles = await prisma.profiles.create({
     *   data: {
     *     // ... data to create a Profiles
     *   }
     * })
     * 
    **/
    create<T extends ProfilesCreateArgs>(
      args: SelectSubset<T, ProfilesCreateArgs>
    ): CheckSelect<T, Prisma__ProfilesClient<Profiles>, Prisma__ProfilesClient<ProfilesGetPayload<T>>>

    /**
     * Create many Profiles.
     *     @param {ProfilesCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profiles = await prisma.profiles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfilesCreateManyArgs>(
      args?: SelectSubset<T, ProfilesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Profiles.
     * @param {ProfilesDeleteArgs} args - Arguments to delete one Profiles.
     * @example
     * // Delete one Profiles
     * const Profiles = await prisma.profiles.delete({
     *   where: {
     *     // ... filter to delete one Profiles
     *   }
     * })
     * 
    **/
    delete<T extends ProfilesDeleteArgs>(
      args: SelectSubset<T, ProfilesDeleteArgs>
    ): CheckSelect<T, Prisma__ProfilesClient<Profiles>, Prisma__ProfilesClient<ProfilesGetPayload<T>>>

    /**
     * Update one Profiles.
     * @param {ProfilesUpdateArgs} args - Arguments to update one Profiles.
     * @example
     * // Update one Profiles
     * const profiles = await prisma.profiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfilesUpdateArgs>(
      args: SelectSubset<T, ProfilesUpdateArgs>
    ): CheckSelect<T, Prisma__ProfilesClient<Profiles>, Prisma__ProfilesClient<ProfilesGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfilesDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfilesDeleteManyArgs>(
      args?: SelectSubset<T, ProfilesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profiles = await prisma.profiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfilesUpdateManyArgs>(
      args: SelectSubset<T, ProfilesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profiles.
     * @param {ProfilesUpsertArgs} args - Arguments to update or create a Profiles.
     * @example
     * // Update or create a Profiles
     * const profiles = await prisma.profiles.upsert({
     *   create: {
     *     // ... data to create a Profiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profiles we want to update
     *   }
     * })
    **/
    upsert<T extends ProfilesUpsertArgs>(
      args: SelectSubset<T, ProfilesUpsertArgs>
    ): CheckSelect<T, Prisma__ProfilesClient<Profiles>, Prisma__ProfilesClient<ProfilesGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profiles.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfilesCountArgs>(
      args?: Subset<T, ProfilesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilesAggregateArgs>(args: Subset<T, ProfilesAggregateArgs>): PrismaPromise<GetProfilesAggregateType<T>>

    /**
     * Group by Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilesGroupByArgs['orderBy'] }
        : { orderBy?: ProfilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfilesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    jogos<T extends JogoFindManyArgs = {}>(args?: Subset<T, JogoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Jogo>>, PrismaPromise<Array<JogoGetPayload<T>>>>;

    jogoFavorito<T extends JogosFavoritosFindManyArgs = {}>(args?: Subset<T, JogosFavoritosFindManyArgs>): CheckSelect<T, PrismaPromise<Array<JogosFavoritos>>, PrismaPromise<Array<JogosFavoritosGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profiles findUnique
   */
  export type ProfilesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Profiles
     * 
    **/
    select?: ProfilesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilesInclude | null
    /**
     * Throw an Error if a Profiles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles findFirst
   */
  export type ProfilesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Profiles
     * 
    **/
    select?: ProfilesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilesInclude | null
    /**
     * Throw an Error if a Profiles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     * 
    **/
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     * 
    **/
    distinct?: Enumerable<ProfilesScalarFieldEnum>
  }


  /**
   * Profiles findMany
   */
  export type ProfilesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profiles
     * 
    **/
    select?: ProfilesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilesInclude | null
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     * 
    **/
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfilesScalarFieldEnum>
  }


  /**
   * Profiles create
   */
  export type ProfilesCreateArgs = {
    /**
     * Select specific fields to fetch from the Profiles
     * 
    **/
    select?: ProfilesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilesInclude | null
    /**
     * The data needed to create a Profiles.
     * 
    **/
    data: XOR<ProfilesCreateInput, ProfilesUncheckedCreateInput>
  }


  /**
   * Profiles createMany
   */
  export type ProfilesCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     * 
    **/
    data: Enumerable<ProfilesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profiles update
   */
  export type ProfilesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profiles
     * 
    **/
    select?: ProfilesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilesInclude | null
    /**
     * The data needed to update a Profiles.
     * 
    **/
    data: XOR<ProfilesUpdateInput, ProfilesUncheckedUpdateInput>
    /**
     * Choose, which Profiles to update.
     * 
    **/
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles updateMany
   */
  export type ProfilesUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     * 
    **/
    data: XOR<ProfilesUpdateManyMutationInput, ProfilesUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     * 
    **/
    where?: ProfilesWhereInput
  }


  /**
   * Profiles upsert
   */
  export type ProfilesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profiles
     * 
    **/
    select?: ProfilesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilesInclude | null
    /**
     * The filter to search for the Profiles to update in case it exists.
     * 
    **/
    where: ProfilesWhereUniqueInput
    /**
     * In case the Profiles found by the `where` argument doesn't exist, create a new Profiles with this data.
     * 
    **/
    create: XOR<ProfilesCreateInput, ProfilesUncheckedCreateInput>
    /**
     * In case the Profiles was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProfilesUpdateInput, ProfilesUncheckedUpdateInput>
  }


  /**
   * Profiles delete
   */
  export type ProfilesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profiles
     * 
    **/
    select?: ProfilesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilesInclude | null
    /**
     * Filter which Profiles to delete.
     * 
    **/
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles deleteMany
   */
  export type ProfilesDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     * 
    **/
    where?: ProfilesWhereInput
  }


  /**
   * Profiles without action
   */
  export type ProfilesArgs = {
    /**
     * Select specific fields to fetch from the Profiles
     * 
    **/
    select?: ProfilesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfilesInclude | null
  }



  /**
   * Model JogosFavoritos
   */


  export type AggregateJogosFavoritos = {
    _count: JogosFavoritosCountAggregateOutputType | null
    _min: JogosFavoritosMinAggregateOutputType | null
    _max: JogosFavoritosMaxAggregateOutputType | null
  }

  export type JogosFavoritosMinAggregateOutputType = {
    id: string | null
    perfilId: string | null
    jogoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JogosFavoritosMaxAggregateOutputType = {
    id: string | null
    perfilId: string | null
    jogoId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JogosFavoritosCountAggregateOutputType = {
    id: number
    perfilId: number
    jogoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JogosFavoritosMinAggregateInputType = {
    id?: true
    perfilId?: true
    jogoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JogosFavoritosMaxAggregateInputType = {
    id?: true
    perfilId?: true
    jogoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JogosFavoritosCountAggregateInputType = {
    id?: true
    perfilId?: true
    jogoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JogosFavoritosAggregateArgs = {
    /**
     * Filter which JogosFavoritos to aggregate.
     * 
    **/
    where?: JogosFavoritosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JogosFavoritos to fetch.
     * 
    **/
    orderBy?: Enumerable<JogosFavoritosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: JogosFavoritosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JogosFavoritos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JogosFavoritos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JogosFavoritos
    **/
    _count?: true | JogosFavoritosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JogosFavoritosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JogosFavoritosMaxAggregateInputType
  }

  export type GetJogosFavoritosAggregateType<T extends JogosFavoritosAggregateArgs> = {
        [P in keyof T & keyof AggregateJogosFavoritos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJogosFavoritos[P]>
      : GetScalarType<T[P], AggregateJogosFavoritos[P]>
  }




  export type JogosFavoritosGroupByArgs = {
    where?: JogosFavoritosWhereInput
    orderBy?: Enumerable<JogosFavoritosOrderByWithAggregationInput>
    by: Array<JogosFavoritosScalarFieldEnum>
    having?: JogosFavoritosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JogosFavoritosCountAggregateInputType | true
    _min?: JogosFavoritosMinAggregateInputType
    _max?: JogosFavoritosMaxAggregateInputType
  }


  export type JogosFavoritosGroupByOutputType = {
    id: string
    perfilId: string
    jogoId: string
    createdAt: Date
    updatedAt: Date
    _count: JogosFavoritosCountAggregateOutputType | null
    _min: JogosFavoritosMinAggregateOutputType | null
    _max: JogosFavoritosMaxAggregateOutputType | null
  }

  type GetJogosFavoritosGroupByPayload<T extends JogosFavoritosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<JogosFavoritosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JogosFavoritosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JogosFavoritosGroupByOutputType[P]>
            : GetScalarType<T[P], JogosFavoritosGroupByOutputType[P]>
        }
      >
    >


  export type JogosFavoritosSelect = {
    id?: boolean
    profile?: boolean | ProfilesArgs
    perfilId?: boolean
    jogo?: boolean | JogoArgs
    jogoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JogosFavoritosInclude = {
    profile?: boolean | ProfilesArgs
    jogo?: boolean | JogoArgs
  }

  export type JogosFavoritosGetPayload<
    S extends boolean | null | undefined | JogosFavoritosArgs,
    U = keyof S
      > = S extends true
        ? JogosFavoritos
    : S extends undefined
    ? never
    : S extends JogosFavoritosArgs | JogosFavoritosFindManyArgs
    ?'include' extends U
    ? JogosFavoritos  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? ProfilesGetPayload<S['include'][P]> :
        P extends 'jogo' ? JogoGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? ProfilesGetPayload<S['select'][P]> :
        P extends 'jogo' ? JogoGetPayload<S['select'][P]> :  P extends keyof JogosFavoritos ? JogosFavoritos[P] : never
  } 
    : JogosFavoritos
  : JogosFavoritos


  type JogosFavoritosCountArgs = Merge<
    Omit<JogosFavoritosFindManyArgs, 'select' | 'include'> & {
      select?: JogosFavoritosCountAggregateInputType | true
    }
  >

  export interface JogosFavoritosDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one JogosFavoritos that matches the filter.
     * @param {JogosFavoritosFindUniqueArgs} args - Arguments to find a JogosFavoritos
     * @example
     * // Get one JogosFavoritos
     * const jogosFavoritos = await prisma.jogosFavoritos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JogosFavoritosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JogosFavoritosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'JogosFavoritos'> extends True ? CheckSelect<T, Prisma__JogosFavoritosClient<JogosFavoritos>, Prisma__JogosFavoritosClient<JogosFavoritosGetPayload<T>>> : CheckSelect<T, Prisma__JogosFavoritosClient<JogosFavoritos | null >, Prisma__JogosFavoritosClient<JogosFavoritosGetPayload<T> | null >>

    /**
     * Find the first JogosFavoritos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogosFavoritosFindFirstArgs} args - Arguments to find a JogosFavoritos
     * @example
     * // Get one JogosFavoritos
     * const jogosFavoritos = await prisma.jogosFavoritos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JogosFavoritosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JogosFavoritosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'JogosFavoritos'> extends True ? CheckSelect<T, Prisma__JogosFavoritosClient<JogosFavoritos>, Prisma__JogosFavoritosClient<JogosFavoritosGetPayload<T>>> : CheckSelect<T, Prisma__JogosFavoritosClient<JogosFavoritos | null >, Prisma__JogosFavoritosClient<JogosFavoritosGetPayload<T> | null >>

    /**
     * Find zero or more JogosFavoritos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogosFavoritosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JogosFavoritos
     * const jogosFavoritos = await prisma.jogosFavoritos.findMany()
     * 
     * // Get first 10 JogosFavoritos
     * const jogosFavoritos = await prisma.jogosFavoritos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jogosFavoritosWithIdOnly = await prisma.jogosFavoritos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JogosFavoritosFindManyArgs>(
      args?: SelectSubset<T, JogosFavoritosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<JogosFavoritos>>, PrismaPromise<Array<JogosFavoritosGetPayload<T>>>>

    /**
     * Create a JogosFavoritos.
     * @param {JogosFavoritosCreateArgs} args - Arguments to create a JogosFavoritos.
     * @example
     * // Create one JogosFavoritos
     * const JogosFavoritos = await prisma.jogosFavoritos.create({
     *   data: {
     *     // ... data to create a JogosFavoritos
     *   }
     * })
     * 
    **/
    create<T extends JogosFavoritosCreateArgs>(
      args: SelectSubset<T, JogosFavoritosCreateArgs>
    ): CheckSelect<T, Prisma__JogosFavoritosClient<JogosFavoritos>, Prisma__JogosFavoritosClient<JogosFavoritosGetPayload<T>>>

    /**
     * Create many JogosFavoritos.
     *     @param {JogosFavoritosCreateManyArgs} args - Arguments to create many JogosFavoritos.
     *     @example
     *     // Create many JogosFavoritos
     *     const jogosFavoritos = await prisma.jogosFavoritos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JogosFavoritosCreateManyArgs>(
      args?: SelectSubset<T, JogosFavoritosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a JogosFavoritos.
     * @param {JogosFavoritosDeleteArgs} args - Arguments to delete one JogosFavoritos.
     * @example
     * // Delete one JogosFavoritos
     * const JogosFavoritos = await prisma.jogosFavoritos.delete({
     *   where: {
     *     // ... filter to delete one JogosFavoritos
     *   }
     * })
     * 
    **/
    delete<T extends JogosFavoritosDeleteArgs>(
      args: SelectSubset<T, JogosFavoritosDeleteArgs>
    ): CheckSelect<T, Prisma__JogosFavoritosClient<JogosFavoritos>, Prisma__JogosFavoritosClient<JogosFavoritosGetPayload<T>>>

    /**
     * Update one JogosFavoritos.
     * @param {JogosFavoritosUpdateArgs} args - Arguments to update one JogosFavoritos.
     * @example
     * // Update one JogosFavoritos
     * const jogosFavoritos = await prisma.jogosFavoritos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JogosFavoritosUpdateArgs>(
      args: SelectSubset<T, JogosFavoritosUpdateArgs>
    ): CheckSelect<T, Prisma__JogosFavoritosClient<JogosFavoritos>, Prisma__JogosFavoritosClient<JogosFavoritosGetPayload<T>>>

    /**
     * Delete zero or more JogosFavoritos.
     * @param {JogosFavoritosDeleteManyArgs} args - Arguments to filter JogosFavoritos to delete.
     * @example
     * // Delete a few JogosFavoritos
     * const { count } = await prisma.jogosFavoritos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JogosFavoritosDeleteManyArgs>(
      args?: SelectSubset<T, JogosFavoritosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more JogosFavoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogosFavoritosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JogosFavoritos
     * const jogosFavoritos = await prisma.jogosFavoritos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JogosFavoritosUpdateManyArgs>(
      args: SelectSubset<T, JogosFavoritosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one JogosFavoritos.
     * @param {JogosFavoritosUpsertArgs} args - Arguments to update or create a JogosFavoritos.
     * @example
     * // Update or create a JogosFavoritos
     * const jogosFavoritos = await prisma.jogosFavoritos.upsert({
     *   create: {
     *     // ... data to create a JogosFavoritos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JogosFavoritos we want to update
     *   }
     * })
    **/
    upsert<T extends JogosFavoritosUpsertArgs>(
      args: SelectSubset<T, JogosFavoritosUpsertArgs>
    ): CheckSelect<T, Prisma__JogosFavoritosClient<JogosFavoritos>, Prisma__JogosFavoritosClient<JogosFavoritosGetPayload<T>>>

    /**
     * Count the number of JogosFavoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogosFavoritosCountArgs} args - Arguments to filter JogosFavoritos to count.
     * @example
     * // Count the number of JogosFavoritos
     * const count = await prisma.jogosFavoritos.count({
     *   where: {
     *     // ... the filter for the JogosFavoritos we want to count
     *   }
     * })
    **/
    count<T extends JogosFavoritosCountArgs>(
      args?: Subset<T, JogosFavoritosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JogosFavoritosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JogosFavoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogosFavoritosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JogosFavoritosAggregateArgs>(args: Subset<T, JogosFavoritosAggregateArgs>): PrismaPromise<GetJogosFavoritosAggregateType<T>>

    /**
     * Group by JogosFavoritos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogosFavoritosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JogosFavoritosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JogosFavoritosGroupByArgs['orderBy'] }
        : { orderBy?: JogosFavoritosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JogosFavoritosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJogosFavoritosGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for JogosFavoritos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JogosFavoritosClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends ProfilesArgs = {}>(args?: Subset<T, ProfilesArgs>): CheckSelect<T, Prisma__ProfilesClient<Profiles | null >, Prisma__ProfilesClient<ProfilesGetPayload<T> | null >>;

    jogo<T extends JogoArgs = {}>(args?: Subset<T, JogoArgs>): CheckSelect<T, Prisma__JogoClient<Jogo | null >, Prisma__JogoClient<JogoGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * JogosFavoritos findUnique
   */
  export type JogosFavoritosFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the JogosFavoritos
     * 
    **/
    select?: JogosFavoritosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogosFavoritosInclude | null
    /**
     * Throw an Error if a JogosFavoritos can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which JogosFavoritos to fetch.
     * 
    **/
    where: JogosFavoritosWhereUniqueInput
  }


  /**
   * JogosFavoritos findFirst
   */
  export type JogosFavoritosFindFirstArgs = {
    /**
     * Select specific fields to fetch from the JogosFavoritos
     * 
    **/
    select?: JogosFavoritosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogosFavoritosInclude | null
    /**
     * Throw an Error if a JogosFavoritos can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which JogosFavoritos to fetch.
     * 
    **/
    where?: JogosFavoritosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JogosFavoritos to fetch.
     * 
    **/
    orderBy?: Enumerable<JogosFavoritosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JogosFavoritos.
     * 
    **/
    cursor?: JogosFavoritosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JogosFavoritos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JogosFavoritos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JogosFavoritos.
     * 
    **/
    distinct?: Enumerable<JogosFavoritosScalarFieldEnum>
  }


  /**
   * JogosFavoritos findMany
   */
  export type JogosFavoritosFindManyArgs = {
    /**
     * Select specific fields to fetch from the JogosFavoritos
     * 
    **/
    select?: JogosFavoritosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogosFavoritosInclude | null
    /**
     * Filter, which JogosFavoritos to fetch.
     * 
    **/
    where?: JogosFavoritosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JogosFavoritos to fetch.
     * 
    **/
    orderBy?: Enumerable<JogosFavoritosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JogosFavoritos.
     * 
    **/
    cursor?: JogosFavoritosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JogosFavoritos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JogosFavoritos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<JogosFavoritosScalarFieldEnum>
  }


  /**
   * JogosFavoritos create
   */
  export type JogosFavoritosCreateArgs = {
    /**
     * Select specific fields to fetch from the JogosFavoritos
     * 
    **/
    select?: JogosFavoritosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogosFavoritosInclude | null
    /**
     * The data needed to create a JogosFavoritos.
     * 
    **/
    data: XOR<JogosFavoritosCreateInput, JogosFavoritosUncheckedCreateInput>
  }


  /**
   * JogosFavoritos createMany
   */
  export type JogosFavoritosCreateManyArgs = {
    /**
     * The data used to create many JogosFavoritos.
     * 
    **/
    data: Enumerable<JogosFavoritosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * JogosFavoritos update
   */
  export type JogosFavoritosUpdateArgs = {
    /**
     * Select specific fields to fetch from the JogosFavoritos
     * 
    **/
    select?: JogosFavoritosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogosFavoritosInclude | null
    /**
     * The data needed to update a JogosFavoritos.
     * 
    **/
    data: XOR<JogosFavoritosUpdateInput, JogosFavoritosUncheckedUpdateInput>
    /**
     * Choose, which JogosFavoritos to update.
     * 
    **/
    where: JogosFavoritosWhereUniqueInput
  }


  /**
   * JogosFavoritos updateMany
   */
  export type JogosFavoritosUpdateManyArgs = {
    /**
     * The data used to update JogosFavoritos.
     * 
    **/
    data: XOR<JogosFavoritosUpdateManyMutationInput, JogosFavoritosUncheckedUpdateManyInput>
    /**
     * Filter which JogosFavoritos to update
     * 
    **/
    where?: JogosFavoritosWhereInput
  }


  /**
   * JogosFavoritos upsert
   */
  export type JogosFavoritosUpsertArgs = {
    /**
     * Select specific fields to fetch from the JogosFavoritos
     * 
    **/
    select?: JogosFavoritosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogosFavoritosInclude | null
    /**
     * The filter to search for the JogosFavoritos to update in case it exists.
     * 
    **/
    where: JogosFavoritosWhereUniqueInput
    /**
     * In case the JogosFavoritos found by the `where` argument doesn't exist, create a new JogosFavoritos with this data.
     * 
    **/
    create: XOR<JogosFavoritosCreateInput, JogosFavoritosUncheckedCreateInput>
    /**
     * In case the JogosFavoritos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<JogosFavoritosUpdateInput, JogosFavoritosUncheckedUpdateInput>
  }


  /**
   * JogosFavoritos delete
   */
  export type JogosFavoritosDeleteArgs = {
    /**
     * Select specific fields to fetch from the JogosFavoritos
     * 
    **/
    select?: JogosFavoritosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogosFavoritosInclude | null
    /**
     * Filter which JogosFavoritos to delete.
     * 
    **/
    where: JogosFavoritosWhereUniqueInput
  }


  /**
   * JogosFavoritos deleteMany
   */
  export type JogosFavoritosDeleteManyArgs = {
    /**
     * Filter which JogosFavoritos to delete
     * 
    **/
    where?: JogosFavoritosWhereInput
  }


  /**
   * JogosFavoritos without action
   */
  export type JogosFavoritosArgs = {
    /**
     * Select specific fields to fetch from the JogosFavoritos
     * 
    **/
    select?: JogosFavoritosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: JogosFavoritosInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const JogoScalarFieldEnum: {
    id: 'id',
    title: 'title',
    coverImageUrl: 'coverImageUrl',
    description: 'description',
    year: 'year',
    imdbScore: 'imdbScore',
    trailerYouTubeUrl: 'trailerYouTubeUrl',
    gameplayYouTubeUrl: 'gameplayYouTubeUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JogoScalarFieldEnum = (typeof JogoScalarFieldEnum)[keyof typeof JogoScalarFieldEnum]


  export const GeneroScalarFieldEnum: {
    id: 'id',
    genero: 'genero',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GeneroScalarFieldEnum = (typeof GeneroScalarFieldEnum)[keyof typeof GeneroScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    cpf: 'cpf',
    isAdmin: 'isAdmin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfilesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    ImageURL: 'ImageURL',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfilesScalarFieldEnum = (typeof ProfilesScalarFieldEnum)[keyof typeof ProfilesScalarFieldEnum]


  export const JogosFavoritosScalarFieldEnum: {
    id: 'id',
    perfilId: 'perfilId',
    jogoId: 'jogoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JogosFavoritosScalarFieldEnum = (typeof JogosFavoritosScalarFieldEnum)[keyof typeof JogosFavoritosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type JogoWhereInput = {
    AND?: Enumerable<JogoWhereInput>
    OR?: Enumerable<JogoWhereInput>
    NOT?: Enumerable<JogoWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    coverImageUrl?: StringFilter | string
    description?: StringFilter | string
    year?: StringFilter | string
    imdbScore?: StringFilter | string
    trailerYouTubeUrl?: StringFilter | string
    gameplayYouTubeUrl?: StringFilter | string
    genero?: GeneroListRelationFilter
    Profiles?: ProfilesListRelationFilter
    jogoFavorito?: JogosFavoritosListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type JogoOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    coverImageUrl?: SortOrder
    description?: SortOrder
    year?: SortOrder
    imdbScore?: SortOrder
    trailerYouTubeUrl?: SortOrder
    gameplayYouTubeUrl?: SortOrder
    genero?: GeneroOrderByRelationAggregateInput
    Profiles?: ProfilesOrderByRelationAggregateInput
    jogoFavorito?: JogosFavoritosOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogoWhereUniqueInput = {
    id?: string
    title?: string
  }

  export type JogoOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    coverImageUrl?: SortOrder
    description?: SortOrder
    year?: SortOrder
    imdbScore?: SortOrder
    trailerYouTubeUrl?: SortOrder
    gameplayYouTubeUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JogoCountOrderByAggregateInput
    _max?: JogoMaxOrderByAggregateInput
    _min?: JogoMinOrderByAggregateInput
  }

  export type JogoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<JogoScalarWhereWithAggregatesInput>
    OR?: Enumerable<JogoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<JogoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    coverImageUrl?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    year?: StringWithAggregatesFilter | string
    imdbScore?: StringWithAggregatesFilter | string
    trailerYouTubeUrl?: StringWithAggregatesFilter | string
    gameplayYouTubeUrl?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GeneroWhereInput = {
    AND?: Enumerable<GeneroWhereInput>
    OR?: Enumerable<GeneroWhereInput>
    NOT?: Enumerable<GeneroWhereInput>
    id?: StringFilter | string
    genero?: StringFilter | string
    jogos?: JogoListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GeneroOrderByWithRelationInput = {
    id?: SortOrder
    genero?: SortOrder
    jogos?: JogoOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneroWhereUniqueInput = {
    id?: string
    genero?: string
  }

  export type GeneroOrderByWithAggregationInput = {
    id?: SortOrder
    genero?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GeneroCountOrderByAggregateInput
    _max?: GeneroMaxOrderByAggregateInput
    _min?: GeneroMinOrderByAggregateInput
  }

  export type GeneroScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GeneroScalarWhereWithAggregatesInput>
    OR?: Enumerable<GeneroScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GeneroScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    genero?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    cpf?: StringFilter | string
    isAdmin?: BoolFilter | boolean
    Profiles?: ProfilesListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    isAdmin?: SortOrder
    Profiles?: ProfilesOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    name?: string
    email?: string
    cpf?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    cpf?: StringWithAggregatesFilter | string
    isAdmin?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProfilesWhereInput = {
    AND?: Enumerable<ProfilesWhereInput>
    OR?: Enumerable<ProfilesWhereInput>
    NOT?: Enumerable<ProfilesWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    ImageURL?: StringFilter | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
    jogos?: JogoListRelationFilter
    jogoFavorito?: JogosFavoritosListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProfilesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    ImageURL?: SortOrder
    User?: UserOrderByWithRelationInput
    userId?: SortOrder
    jogos?: JogoOrderByRelationAggregateInput
    jogoFavorito?: JogosFavoritosOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfilesWhereUniqueInput = {
    id?: string
    title?: string
  }

  export type ProfilesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    ImageURL?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfilesCountOrderByAggregateInput
    _max?: ProfilesMaxOrderByAggregateInput
    _min?: ProfilesMinOrderByAggregateInput
  }

  export type ProfilesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfilesScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfilesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfilesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    ImageURL?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type JogosFavoritosWhereInput = {
    AND?: Enumerable<JogosFavoritosWhereInput>
    OR?: Enumerable<JogosFavoritosWhereInput>
    NOT?: Enumerable<JogosFavoritosWhereInput>
    id?: StringFilter | string
    profile?: XOR<ProfilesRelationFilter, ProfilesWhereInput>
    perfilId?: StringFilter | string
    jogo?: XOR<JogoRelationFilter, JogoWhereInput>
    jogoId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type JogosFavoritosOrderByWithRelationInput = {
    id?: SortOrder
    profile?: ProfilesOrderByWithRelationInput
    perfilId?: SortOrder
    jogo?: JogoOrderByWithRelationInput
    jogoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogosFavoritosWhereUniqueInput = {
    id?: string
    perfilId_jogoId?: JogosFavoritosPerfilIdJogoIdCompoundUniqueInput
  }

  export type JogosFavoritosOrderByWithAggregationInput = {
    id?: SortOrder
    perfilId?: SortOrder
    jogoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JogosFavoritosCountOrderByAggregateInput
    _max?: JogosFavoritosMaxOrderByAggregateInput
    _min?: JogosFavoritosMinOrderByAggregateInput
  }

  export type JogosFavoritosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<JogosFavoritosScalarWhereWithAggregatesInput>
    OR?: Enumerable<JogosFavoritosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<JogosFavoritosScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    perfilId?: StringWithAggregatesFilter | string
    jogoId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type JogoCreateInput = {
    id?: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    genero?: GeneroCreateNestedManyWithoutJogosInput
    Profiles?: ProfilesCreateNestedManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosCreateNestedManyWithoutJogoInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoUncheckedCreateInput = {
    id?: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    genero?: GeneroUncheckedCreateNestedManyWithoutJogosInput
    Profiles?: ProfilesUncheckedCreateNestedManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosUncheckedCreateNestedManyWithoutJogoInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    genero?: GeneroUpdateManyWithoutJogosInput
    Profiles?: ProfilesUpdateManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosUpdateManyWithoutJogoInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    genero?: GeneroUncheckedUpdateManyWithoutJogosInput
    Profiles?: ProfilesUncheckedUpdateManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosUncheckedUpdateManyWithoutJogoInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoCreateManyInput = {
    id?: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneroCreateInput = {
    id?: string
    genero: string
    jogos?: JogoCreateNestedManyWithoutGeneroInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneroUncheckedCreateInput = {
    id?: string
    genero: string
    jogos?: JogoUncheckedCreateNestedManyWithoutGeneroInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneroUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    jogos?: JogoUpdateManyWithoutGeneroInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneroUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    jogos?: JogoUncheckedUpdateManyWithoutGeneroInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneroCreateManyInput = {
    id?: string
    genero: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneroUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneroUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    cpf: string
    isAdmin?: boolean
    Profiles?: ProfilesCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    cpf: string
    isAdmin?: boolean
    Profiles?: ProfilesUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    Profiles?: ProfilesUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    Profiles?: ProfilesUncheckedUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    cpf: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesCreateInput = {
    id?: string
    title: string
    ImageURL: string
    User: UserCreateNestedOneWithoutProfilesInput
    jogos?: JogoCreateNestedManyWithoutProfilesInput
    jogoFavorito?: JogosFavoritosCreateNestedManyWithoutProfileInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesUncheckedCreateInput = {
    id?: string
    title: string
    ImageURL: string
    userId: string
    jogos?: JogoUncheckedCreateNestedManyWithoutProfilesInput
    jogoFavorito?: JogosFavoritosUncheckedCreateNestedManyWithoutProfileInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutProfilesInput
    jogos?: JogoUpdateManyWithoutProfilesInput
    jogoFavorito?: JogosFavoritosUpdateManyWithoutProfileInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jogos?: JogoUncheckedUpdateManyWithoutProfilesInput
    jogoFavorito?: JogosFavoritosUncheckedUpdateManyWithoutProfileInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesCreateManyInput = {
    id?: string
    title: string
    ImageURL: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosCreateInput = {
    id?: string
    profile: ProfilesCreateNestedOneWithoutJogoFavoritoInput
    jogo: JogoCreateNestedOneWithoutJogoFavoritoInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogosFavoritosUncheckedCreateInput = {
    id?: string
    perfilId: string
    jogoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogosFavoritosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile?: ProfilesUpdateOneRequiredWithoutJogoFavoritoInput
    jogo?: JogoUpdateOneRequiredWithoutJogoFavoritoInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    perfilId?: StringFieldUpdateOperationsInput | string
    jogoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosCreateManyInput = {
    id?: string
    perfilId: string
    jogoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogosFavoritosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    perfilId?: StringFieldUpdateOperationsInput | string
    jogoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type GeneroListRelationFilter = {
    every?: GeneroWhereInput
    some?: GeneroWhereInput
    none?: GeneroWhereInput
  }

  export type ProfilesListRelationFilter = {
    every?: ProfilesWhereInput
    some?: ProfilesWhereInput
    none?: ProfilesWhereInput
  }

  export type JogosFavoritosListRelationFilter = {
    every?: JogosFavoritosWhereInput
    some?: JogosFavoritosWhereInput
    none?: JogosFavoritosWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type GeneroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfilesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JogosFavoritosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JogoCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    coverImageUrl?: SortOrder
    description?: SortOrder
    year?: SortOrder
    imdbScore?: SortOrder
    trailerYouTubeUrl?: SortOrder
    gameplayYouTubeUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogoMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    coverImageUrl?: SortOrder
    description?: SortOrder
    year?: SortOrder
    imdbScore?: SortOrder
    trailerYouTubeUrl?: SortOrder
    gameplayYouTubeUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogoMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    coverImageUrl?: SortOrder
    description?: SortOrder
    year?: SortOrder
    imdbScore?: SortOrder
    trailerYouTubeUrl?: SortOrder
    gameplayYouTubeUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type JogoListRelationFilter = {
    every?: JogoWhereInput
    some?: JogoWhereInput
    none?: JogoWhereInput
  }

  export type JogoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GeneroCountOrderByAggregateInput = {
    id?: SortOrder
    genero?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneroMaxOrderByAggregateInput = {
    id?: SortOrder
    genero?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneroMinOrderByAggregateInput = {
    id?: SortOrder
    genero?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    cpf?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfilesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    ImageURL?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfilesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    ImageURL?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfilesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    ImageURL?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfilesRelationFilter = {
    is?: ProfilesWhereInput
    isNot?: ProfilesWhereInput
  }

  export type JogoRelationFilter = {
    is?: JogoWhereInput
    isNot?: JogoWhereInput
  }

  export type JogosFavoritosPerfilIdJogoIdCompoundUniqueInput = {
    perfilId: string
    jogoId: string
  }

  export type JogosFavoritosCountOrderByAggregateInput = {
    id?: SortOrder
    perfilId?: SortOrder
    jogoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogosFavoritosMaxOrderByAggregateInput = {
    id?: SortOrder
    perfilId?: SortOrder
    jogoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JogosFavoritosMinOrderByAggregateInput = {
    id?: SortOrder
    perfilId?: SortOrder
    jogoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneroCreateNestedManyWithoutJogosInput = {
    create?: XOR<Enumerable<GeneroCreateWithoutJogosInput>, Enumerable<GeneroUncheckedCreateWithoutJogosInput>>
    connectOrCreate?: Enumerable<GeneroCreateOrConnectWithoutJogosInput>
    connect?: Enumerable<GeneroWhereUniqueInput>
  }

  export type ProfilesCreateNestedManyWithoutJogosInput = {
    create?: XOR<Enumerable<ProfilesCreateWithoutJogosInput>, Enumerable<ProfilesUncheckedCreateWithoutJogosInput>>
    connectOrCreate?: Enumerable<ProfilesCreateOrConnectWithoutJogosInput>
    connect?: Enumerable<ProfilesWhereUniqueInput>
  }

  export type JogosFavoritosCreateNestedManyWithoutJogoInput = {
    create?: XOR<Enumerable<JogosFavoritosCreateWithoutJogoInput>, Enumerable<JogosFavoritosUncheckedCreateWithoutJogoInput>>
    connectOrCreate?: Enumerable<JogosFavoritosCreateOrConnectWithoutJogoInput>
    createMany?: JogosFavoritosCreateManyJogoInputEnvelope
    connect?: Enumerable<JogosFavoritosWhereUniqueInput>
  }

  export type GeneroUncheckedCreateNestedManyWithoutJogosInput = {
    create?: XOR<Enumerable<GeneroCreateWithoutJogosInput>, Enumerable<GeneroUncheckedCreateWithoutJogosInput>>
    connectOrCreate?: Enumerable<GeneroCreateOrConnectWithoutJogosInput>
    connect?: Enumerable<GeneroWhereUniqueInput>
  }

  export type ProfilesUncheckedCreateNestedManyWithoutJogosInput = {
    create?: XOR<Enumerable<ProfilesCreateWithoutJogosInput>, Enumerable<ProfilesUncheckedCreateWithoutJogosInput>>
    connectOrCreate?: Enumerable<ProfilesCreateOrConnectWithoutJogosInput>
    connect?: Enumerable<ProfilesWhereUniqueInput>
  }

  export type JogosFavoritosUncheckedCreateNestedManyWithoutJogoInput = {
    create?: XOR<Enumerable<JogosFavoritosCreateWithoutJogoInput>, Enumerable<JogosFavoritosUncheckedCreateWithoutJogoInput>>
    connectOrCreate?: Enumerable<JogosFavoritosCreateOrConnectWithoutJogoInput>
    createMany?: JogosFavoritosCreateManyJogoInputEnvelope
    connect?: Enumerable<JogosFavoritosWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type GeneroUpdateManyWithoutJogosInput = {
    create?: XOR<Enumerable<GeneroCreateWithoutJogosInput>, Enumerable<GeneroUncheckedCreateWithoutJogosInput>>
    connectOrCreate?: Enumerable<GeneroCreateOrConnectWithoutJogosInput>
    upsert?: Enumerable<GeneroUpsertWithWhereUniqueWithoutJogosInput>
    set?: Enumerable<GeneroWhereUniqueInput>
    disconnect?: Enumerable<GeneroWhereUniqueInput>
    delete?: Enumerable<GeneroWhereUniqueInput>
    connect?: Enumerable<GeneroWhereUniqueInput>
    update?: Enumerable<GeneroUpdateWithWhereUniqueWithoutJogosInput>
    updateMany?: Enumerable<GeneroUpdateManyWithWhereWithoutJogosInput>
    deleteMany?: Enumerable<GeneroScalarWhereInput>
  }

  export type ProfilesUpdateManyWithoutJogosInput = {
    create?: XOR<Enumerable<ProfilesCreateWithoutJogosInput>, Enumerable<ProfilesUncheckedCreateWithoutJogosInput>>
    connectOrCreate?: Enumerable<ProfilesCreateOrConnectWithoutJogosInput>
    upsert?: Enumerable<ProfilesUpsertWithWhereUniqueWithoutJogosInput>
    set?: Enumerable<ProfilesWhereUniqueInput>
    disconnect?: Enumerable<ProfilesWhereUniqueInput>
    delete?: Enumerable<ProfilesWhereUniqueInput>
    connect?: Enumerable<ProfilesWhereUniqueInput>
    update?: Enumerable<ProfilesUpdateWithWhereUniqueWithoutJogosInput>
    updateMany?: Enumerable<ProfilesUpdateManyWithWhereWithoutJogosInput>
    deleteMany?: Enumerable<ProfilesScalarWhereInput>
  }

  export type JogosFavoritosUpdateManyWithoutJogoInput = {
    create?: XOR<Enumerable<JogosFavoritosCreateWithoutJogoInput>, Enumerable<JogosFavoritosUncheckedCreateWithoutJogoInput>>
    connectOrCreate?: Enumerable<JogosFavoritosCreateOrConnectWithoutJogoInput>
    upsert?: Enumerable<JogosFavoritosUpsertWithWhereUniqueWithoutJogoInput>
    createMany?: JogosFavoritosCreateManyJogoInputEnvelope
    set?: Enumerable<JogosFavoritosWhereUniqueInput>
    disconnect?: Enumerable<JogosFavoritosWhereUniqueInput>
    delete?: Enumerable<JogosFavoritosWhereUniqueInput>
    connect?: Enumerable<JogosFavoritosWhereUniqueInput>
    update?: Enumerable<JogosFavoritosUpdateWithWhereUniqueWithoutJogoInput>
    updateMany?: Enumerable<JogosFavoritosUpdateManyWithWhereWithoutJogoInput>
    deleteMany?: Enumerable<JogosFavoritosScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GeneroUncheckedUpdateManyWithoutJogosInput = {
    create?: XOR<Enumerable<GeneroCreateWithoutJogosInput>, Enumerable<GeneroUncheckedCreateWithoutJogosInput>>
    connectOrCreate?: Enumerable<GeneroCreateOrConnectWithoutJogosInput>
    upsert?: Enumerable<GeneroUpsertWithWhereUniqueWithoutJogosInput>
    set?: Enumerable<GeneroWhereUniqueInput>
    disconnect?: Enumerable<GeneroWhereUniqueInput>
    delete?: Enumerable<GeneroWhereUniqueInput>
    connect?: Enumerable<GeneroWhereUniqueInput>
    update?: Enumerable<GeneroUpdateWithWhereUniqueWithoutJogosInput>
    updateMany?: Enumerable<GeneroUpdateManyWithWhereWithoutJogosInput>
    deleteMany?: Enumerable<GeneroScalarWhereInput>
  }

  export type ProfilesUncheckedUpdateManyWithoutJogosInput = {
    create?: XOR<Enumerable<ProfilesCreateWithoutJogosInput>, Enumerable<ProfilesUncheckedCreateWithoutJogosInput>>
    connectOrCreate?: Enumerable<ProfilesCreateOrConnectWithoutJogosInput>
    upsert?: Enumerable<ProfilesUpsertWithWhereUniqueWithoutJogosInput>
    set?: Enumerable<ProfilesWhereUniqueInput>
    disconnect?: Enumerable<ProfilesWhereUniqueInput>
    delete?: Enumerable<ProfilesWhereUniqueInput>
    connect?: Enumerable<ProfilesWhereUniqueInput>
    update?: Enumerable<ProfilesUpdateWithWhereUniqueWithoutJogosInput>
    updateMany?: Enumerable<ProfilesUpdateManyWithWhereWithoutJogosInput>
    deleteMany?: Enumerable<ProfilesScalarWhereInput>
  }

  export type JogosFavoritosUncheckedUpdateManyWithoutJogoInput = {
    create?: XOR<Enumerable<JogosFavoritosCreateWithoutJogoInput>, Enumerable<JogosFavoritosUncheckedCreateWithoutJogoInput>>
    connectOrCreate?: Enumerable<JogosFavoritosCreateOrConnectWithoutJogoInput>
    upsert?: Enumerable<JogosFavoritosUpsertWithWhereUniqueWithoutJogoInput>
    createMany?: JogosFavoritosCreateManyJogoInputEnvelope
    set?: Enumerable<JogosFavoritosWhereUniqueInput>
    disconnect?: Enumerable<JogosFavoritosWhereUniqueInput>
    delete?: Enumerable<JogosFavoritosWhereUniqueInput>
    connect?: Enumerable<JogosFavoritosWhereUniqueInput>
    update?: Enumerable<JogosFavoritosUpdateWithWhereUniqueWithoutJogoInput>
    updateMany?: Enumerable<JogosFavoritosUpdateManyWithWhereWithoutJogoInput>
    deleteMany?: Enumerable<JogosFavoritosScalarWhereInput>
  }

  export type JogoCreateNestedManyWithoutGeneroInput = {
    create?: XOR<Enumerable<JogoCreateWithoutGeneroInput>, Enumerable<JogoUncheckedCreateWithoutGeneroInput>>
    connectOrCreate?: Enumerable<JogoCreateOrConnectWithoutGeneroInput>
    connect?: Enumerable<JogoWhereUniqueInput>
  }

  export type JogoUncheckedCreateNestedManyWithoutGeneroInput = {
    create?: XOR<Enumerable<JogoCreateWithoutGeneroInput>, Enumerable<JogoUncheckedCreateWithoutGeneroInput>>
    connectOrCreate?: Enumerable<JogoCreateOrConnectWithoutGeneroInput>
    connect?: Enumerable<JogoWhereUniqueInput>
  }

  export type JogoUpdateManyWithoutGeneroInput = {
    create?: XOR<Enumerable<JogoCreateWithoutGeneroInput>, Enumerable<JogoUncheckedCreateWithoutGeneroInput>>
    connectOrCreate?: Enumerable<JogoCreateOrConnectWithoutGeneroInput>
    upsert?: Enumerable<JogoUpsertWithWhereUniqueWithoutGeneroInput>
    set?: Enumerable<JogoWhereUniqueInput>
    disconnect?: Enumerable<JogoWhereUniqueInput>
    delete?: Enumerable<JogoWhereUniqueInput>
    connect?: Enumerable<JogoWhereUniqueInput>
    update?: Enumerable<JogoUpdateWithWhereUniqueWithoutGeneroInput>
    updateMany?: Enumerable<JogoUpdateManyWithWhereWithoutGeneroInput>
    deleteMany?: Enumerable<JogoScalarWhereInput>
  }

  export type JogoUncheckedUpdateManyWithoutGeneroInput = {
    create?: XOR<Enumerable<JogoCreateWithoutGeneroInput>, Enumerable<JogoUncheckedCreateWithoutGeneroInput>>
    connectOrCreate?: Enumerable<JogoCreateOrConnectWithoutGeneroInput>
    upsert?: Enumerable<JogoUpsertWithWhereUniqueWithoutGeneroInput>
    set?: Enumerable<JogoWhereUniqueInput>
    disconnect?: Enumerable<JogoWhereUniqueInput>
    delete?: Enumerable<JogoWhereUniqueInput>
    connect?: Enumerable<JogoWhereUniqueInput>
    update?: Enumerable<JogoUpdateWithWhereUniqueWithoutGeneroInput>
    updateMany?: Enumerable<JogoUpdateManyWithWhereWithoutGeneroInput>
    deleteMany?: Enumerable<JogoScalarWhereInput>
  }

  export type ProfilesCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProfilesCreateWithoutUserInput>, Enumerable<ProfilesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProfilesCreateOrConnectWithoutUserInput>
    createMany?: ProfilesCreateManyUserInputEnvelope
    connect?: Enumerable<ProfilesWhereUniqueInput>
  }

  export type ProfilesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProfilesCreateWithoutUserInput>, Enumerable<ProfilesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProfilesCreateOrConnectWithoutUserInput>
    createMany?: ProfilesCreateManyUserInputEnvelope
    connect?: Enumerable<ProfilesWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProfilesUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ProfilesCreateWithoutUserInput>, Enumerable<ProfilesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProfilesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProfilesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProfilesCreateManyUserInputEnvelope
    set?: Enumerable<ProfilesWhereUniqueInput>
    disconnect?: Enumerable<ProfilesWhereUniqueInput>
    delete?: Enumerable<ProfilesWhereUniqueInput>
    connect?: Enumerable<ProfilesWhereUniqueInput>
    update?: Enumerable<ProfilesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProfilesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProfilesScalarWhereInput>
  }

  export type ProfilesUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ProfilesCreateWithoutUserInput>, Enumerable<ProfilesUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProfilesCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProfilesUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProfilesCreateManyUserInputEnvelope
    set?: Enumerable<ProfilesWhereUniqueInput>
    disconnect?: Enumerable<ProfilesWhereUniqueInput>
    delete?: Enumerable<ProfilesWhereUniqueInput>
    connect?: Enumerable<ProfilesWhereUniqueInput>
    update?: Enumerable<ProfilesUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProfilesUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProfilesScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutProfilesInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type JogoCreateNestedManyWithoutProfilesInput = {
    create?: XOR<Enumerable<JogoCreateWithoutProfilesInput>, Enumerable<JogoUncheckedCreateWithoutProfilesInput>>
    connectOrCreate?: Enumerable<JogoCreateOrConnectWithoutProfilesInput>
    connect?: Enumerable<JogoWhereUniqueInput>
  }

  export type JogosFavoritosCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<JogosFavoritosCreateWithoutProfileInput>, Enumerable<JogosFavoritosUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<JogosFavoritosCreateOrConnectWithoutProfileInput>
    createMany?: JogosFavoritosCreateManyProfileInputEnvelope
    connect?: Enumerable<JogosFavoritosWhereUniqueInput>
  }

  export type JogoUncheckedCreateNestedManyWithoutProfilesInput = {
    create?: XOR<Enumerable<JogoCreateWithoutProfilesInput>, Enumerable<JogoUncheckedCreateWithoutProfilesInput>>
    connectOrCreate?: Enumerable<JogoCreateOrConnectWithoutProfilesInput>
    connect?: Enumerable<JogoWhereUniqueInput>
  }

  export type JogosFavoritosUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<JogosFavoritosCreateWithoutProfileInput>, Enumerable<JogosFavoritosUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<JogosFavoritosCreateOrConnectWithoutProfileInput>
    createMany?: JogosFavoritosCreateManyProfileInputEnvelope
    connect?: Enumerable<JogosFavoritosWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutProfilesInput = {
    create?: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilesInput
    upsert?: UserUpsertWithoutProfilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
  }

  export type JogoUpdateManyWithoutProfilesInput = {
    create?: XOR<Enumerable<JogoCreateWithoutProfilesInput>, Enumerable<JogoUncheckedCreateWithoutProfilesInput>>
    connectOrCreate?: Enumerable<JogoCreateOrConnectWithoutProfilesInput>
    upsert?: Enumerable<JogoUpsertWithWhereUniqueWithoutProfilesInput>
    set?: Enumerable<JogoWhereUniqueInput>
    disconnect?: Enumerable<JogoWhereUniqueInput>
    delete?: Enumerable<JogoWhereUniqueInput>
    connect?: Enumerable<JogoWhereUniqueInput>
    update?: Enumerable<JogoUpdateWithWhereUniqueWithoutProfilesInput>
    updateMany?: Enumerable<JogoUpdateManyWithWhereWithoutProfilesInput>
    deleteMany?: Enumerable<JogoScalarWhereInput>
  }

  export type JogosFavoritosUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<JogosFavoritosCreateWithoutProfileInput>, Enumerable<JogosFavoritosUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<JogosFavoritosCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<JogosFavoritosUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: JogosFavoritosCreateManyProfileInputEnvelope
    set?: Enumerable<JogosFavoritosWhereUniqueInput>
    disconnect?: Enumerable<JogosFavoritosWhereUniqueInput>
    delete?: Enumerable<JogosFavoritosWhereUniqueInput>
    connect?: Enumerable<JogosFavoritosWhereUniqueInput>
    update?: Enumerable<JogosFavoritosUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<JogosFavoritosUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<JogosFavoritosScalarWhereInput>
  }

  export type JogoUncheckedUpdateManyWithoutProfilesInput = {
    create?: XOR<Enumerable<JogoCreateWithoutProfilesInput>, Enumerable<JogoUncheckedCreateWithoutProfilesInput>>
    connectOrCreate?: Enumerable<JogoCreateOrConnectWithoutProfilesInput>
    upsert?: Enumerable<JogoUpsertWithWhereUniqueWithoutProfilesInput>
    set?: Enumerable<JogoWhereUniqueInput>
    disconnect?: Enumerable<JogoWhereUniqueInput>
    delete?: Enumerable<JogoWhereUniqueInput>
    connect?: Enumerable<JogoWhereUniqueInput>
    update?: Enumerable<JogoUpdateWithWhereUniqueWithoutProfilesInput>
    updateMany?: Enumerable<JogoUpdateManyWithWhereWithoutProfilesInput>
    deleteMany?: Enumerable<JogoScalarWhereInput>
  }

  export type JogosFavoritosUncheckedUpdateManyWithoutProfileInput = {
    create?: XOR<Enumerable<JogosFavoritosCreateWithoutProfileInput>, Enumerable<JogosFavoritosUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<JogosFavoritosCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<JogosFavoritosUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: JogosFavoritosCreateManyProfileInputEnvelope
    set?: Enumerable<JogosFavoritosWhereUniqueInput>
    disconnect?: Enumerable<JogosFavoritosWhereUniqueInput>
    delete?: Enumerable<JogosFavoritosWhereUniqueInput>
    connect?: Enumerable<JogosFavoritosWhereUniqueInput>
    update?: Enumerable<JogosFavoritosUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<JogosFavoritosUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<JogosFavoritosScalarWhereInput>
  }

  export type ProfilesCreateNestedOneWithoutJogoFavoritoInput = {
    create?: XOR<ProfilesCreateWithoutJogoFavoritoInput, ProfilesUncheckedCreateWithoutJogoFavoritoInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutJogoFavoritoInput
    connect?: ProfilesWhereUniqueInput
  }

  export type JogoCreateNestedOneWithoutJogoFavoritoInput = {
    create?: XOR<JogoCreateWithoutJogoFavoritoInput, JogoUncheckedCreateWithoutJogoFavoritoInput>
    connectOrCreate?: JogoCreateOrConnectWithoutJogoFavoritoInput
    connect?: JogoWhereUniqueInput
  }

  export type ProfilesUpdateOneRequiredWithoutJogoFavoritoInput = {
    create?: XOR<ProfilesCreateWithoutJogoFavoritoInput, ProfilesUncheckedCreateWithoutJogoFavoritoInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutJogoFavoritoInput
    upsert?: ProfilesUpsertWithoutJogoFavoritoInput
    connect?: ProfilesWhereUniqueInput
    update?: XOR<ProfilesUpdateWithoutJogoFavoritoInput, ProfilesUncheckedUpdateWithoutJogoFavoritoInput>
  }

  export type JogoUpdateOneRequiredWithoutJogoFavoritoInput = {
    create?: XOR<JogoCreateWithoutJogoFavoritoInput, JogoUncheckedCreateWithoutJogoFavoritoInput>
    connectOrCreate?: JogoCreateOrConnectWithoutJogoFavoritoInput
    upsert?: JogoUpsertWithoutJogoFavoritoInput
    connect?: JogoWhereUniqueInput
    update?: XOR<JogoUpdateWithoutJogoFavoritoInput, JogoUncheckedUpdateWithoutJogoFavoritoInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type GeneroCreateWithoutJogosInput = {
    id?: string
    genero: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneroUncheckedCreateWithoutJogosInput = {
    id?: string
    genero: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneroCreateOrConnectWithoutJogosInput = {
    where: GeneroWhereUniqueInput
    create: XOR<GeneroCreateWithoutJogosInput, GeneroUncheckedCreateWithoutJogosInput>
  }

  export type ProfilesCreateWithoutJogosInput = {
    id?: string
    title: string
    ImageURL: string
    User: UserCreateNestedOneWithoutProfilesInput
    jogoFavorito?: JogosFavoritosCreateNestedManyWithoutProfileInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesUncheckedCreateWithoutJogosInput = {
    id?: string
    title: string
    ImageURL: string
    userId: string
    jogoFavorito?: JogosFavoritosUncheckedCreateNestedManyWithoutProfileInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesCreateOrConnectWithoutJogosInput = {
    where: ProfilesWhereUniqueInput
    create: XOR<ProfilesCreateWithoutJogosInput, ProfilesUncheckedCreateWithoutJogosInput>
  }

  export type JogosFavoritosCreateWithoutJogoInput = {
    id?: string
    profile: ProfilesCreateNestedOneWithoutJogoFavoritoInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogosFavoritosUncheckedCreateWithoutJogoInput = {
    id?: string
    perfilId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogosFavoritosCreateOrConnectWithoutJogoInput = {
    where: JogosFavoritosWhereUniqueInput
    create: XOR<JogosFavoritosCreateWithoutJogoInput, JogosFavoritosUncheckedCreateWithoutJogoInput>
  }

  export type JogosFavoritosCreateManyJogoInputEnvelope = {
    data: Enumerable<JogosFavoritosCreateManyJogoInput>
    skipDuplicates?: boolean
  }

  export type GeneroUpsertWithWhereUniqueWithoutJogosInput = {
    where: GeneroWhereUniqueInput
    update: XOR<GeneroUpdateWithoutJogosInput, GeneroUncheckedUpdateWithoutJogosInput>
    create: XOR<GeneroCreateWithoutJogosInput, GeneroUncheckedCreateWithoutJogosInput>
  }

  export type GeneroUpdateWithWhereUniqueWithoutJogosInput = {
    where: GeneroWhereUniqueInput
    data: XOR<GeneroUpdateWithoutJogosInput, GeneroUncheckedUpdateWithoutJogosInput>
  }

  export type GeneroUpdateManyWithWhereWithoutJogosInput = {
    where: GeneroScalarWhereInput
    data: XOR<GeneroUpdateManyMutationInput, GeneroUncheckedUpdateManyWithoutGeneroInput>
  }

  export type GeneroScalarWhereInput = {
    AND?: Enumerable<GeneroScalarWhereInput>
    OR?: Enumerable<GeneroScalarWhereInput>
    NOT?: Enumerable<GeneroScalarWhereInput>
    id?: StringFilter | string
    genero?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProfilesUpsertWithWhereUniqueWithoutJogosInput = {
    where: ProfilesWhereUniqueInput
    update: XOR<ProfilesUpdateWithoutJogosInput, ProfilesUncheckedUpdateWithoutJogosInput>
    create: XOR<ProfilesCreateWithoutJogosInput, ProfilesUncheckedCreateWithoutJogosInput>
  }

  export type ProfilesUpdateWithWhereUniqueWithoutJogosInput = {
    where: ProfilesWhereUniqueInput
    data: XOR<ProfilesUpdateWithoutJogosInput, ProfilesUncheckedUpdateWithoutJogosInput>
  }

  export type ProfilesUpdateManyWithWhereWithoutJogosInput = {
    where: ProfilesScalarWhereInput
    data: XOR<ProfilesUpdateManyMutationInput, ProfilesUncheckedUpdateManyWithoutProfilesInput>
  }

  export type ProfilesScalarWhereInput = {
    AND?: Enumerable<ProfilesScalarWhereInput>
    OR?: Enumerable<ProfilesScalarWhereInput>
    NOT?: Enumerable<ProfilesScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    ImageURL?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type JogosFavoritosUpsertWithWhereUniqueWithoutJogoInput = {
    where: JogosFavoritosWhereUniqueInput
    update: XOR<JogosFavoritosUpdateWithoutJogoInput, JogosFavoritosUncheckedUpdateWithoutJogoInput>
    create: XOR<JogosFavoritosCreateWithoutJogoInput, JogosFavoritosUncheckedCreateWithoutJogoInput>
  }

  export type JogosFavoritosUpdateWithWhereUniqueWithoutJogoInput = {
    where: JogosFavoritosWhereUniqueInput
    data: XOR<JogosFavoritosUpdateWithoutJogoInput, JogosFavoritosUncheckedUpdateWithoutJogoInput>
  }

  export type JogosFavoritosUpdateManyWithWhereWithoutJogoInput = {
    where: JogosFavoritosScalarWhereInput
    data: XOR<JogosFavoritosUpdateManyMutationInput, JogosFavoritosUncheckedUpdateManyWithoutJogoFavoritoInput>
  }

  export type JogosFavoritosScalarWhereInput = {
    AND?: Enumerable<JogosFavoritosScalarWhereInput>
    OR?: Enumerable<JogosFavoritosScalarWhereInput>
    NOT?: Enumerable<JogosFavoritosScalarWhereInput>
    id?: StringFilter | string
    perfilId?: StringFilter | string
    jogoId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type JogoCreateWithoutGeneroInput = {
    id?: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    Profiles?: ProfilesCreateNestedManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosCreateNestedManyWithoutJogoInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoUncheckedCreateWithoutGeneroInput = {
    id?: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    Profiles?: ProfilesUncheckedCreateNestedManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosUncheckedCreateNestedManyWithoutJogoInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoCreateOrConnectWithoutGeneroInput = {
    where: JogoWhereUniqueInput
    create: XOR<JogoCreateWithoutGeneroInput, JogoUncheckedCreateWithoutGeneroInput>
  }

  export type JogoUpsertWithWhereUniqueWithoutGeneroInput = {
    where: JogoWhereUniqueInput
    update: XOR<JogoUpdateWithoutGeneroInput, JogoUncheckedUpdateWithoutGeneroInput>
    create: XOR<JogoCreateWithoutGeneroInput, JogoUncheckedCreateWithoutGeneroInput>
  }

  export type JogoUpdateWithWhereUniqueWithoutGeneroInput = {
    where: JogoWhereUniqueInput
    data: XOR<JogoUpdateWithoutGeneroInput, JogoUncheckedUpdateWithoutGeneroInput>
  }

  export type JogoUpdateManyWithWhereWithoutGeneroInput = {
    where: JogoScalarWhereInput
    data: XOR<JogoUpdateManyMutationInput, JogoUncheckedUpdateManyWithoutJogosInput>
  }

  export type JogoScalarWhereInput = {
    AND?: Enumerable<JogoScalarWhereInput>
    OR?: Enumerable<JogoScalarWhereInput>
    NOT?: Enumerable<JogoScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    coverImageUrl?: StringFilter | string
    description?: StringFilter | string
    year?: StringFilter | string
    imdbScore?: StringFilter | string
    trailerYouTubeUrl?: StringFilter | string
    gameplayYouTubeUrl?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProfilesCreateWithoutUserInput = {
    id?: string
    title: string
    ImageURL: string
    jogos?: JogoCreateNestedManyWithoutProfilesInput
    jogoFavorito?: JogosFavoritosCreateNestedManyWithoutProfileInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    ImageURL: string
    jogos?: JogoUncheckedCreateNestedManyWithoutProfilesInput
    jogoFavorito?: JogosFavoritosUncheckedCreateNestedManyWithoutProfileInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesCreateOrConnectWithoutUserInput = {
    where: ProfilesWhereUniqueInput
    create: XOR<ProfilesCreateWithoutUserInput, ProfilesUncheckedCreateWithoutUserInput>
  }

  export type ProfilesCreateManyUserInputEnvelope = {
    data: Enumerable<ProfilesCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProfilesUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfilesWhereUniqueInput
    update: XOR<ProfilesUpdateWithoutUserInput, ProfilesUncheckedUpdateWithoutUserInput>
    create: XOR<ProfilesCreateWithoutUserInput, ProfilesUncheckedCreateWithoutUserInput>
  }

  export type ProfilesUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfilesWhereUniqueInput
    data: XOR<ProfilesUpdateWithoutUserInput, ProfilesUncheckedUpdateWithoutUserInput>
  }

  export type ProfilesUpdateManyWithWhereWithoutUserInput = {
    where: ProfilesScalarWhereInput
    data: XOR<ProfilesUpdateManyMutationInput, ProfilesUncheckedUpdateManyWithoutProfilesInput>
  }

  export type UserCreateWithoutProfilesInput = {
    id?: string
    name: string
    email: string
    password: string
    cpf: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutProfilesInput = {
    id?: string
    name: string
    email: string
    password: string
    cpf: string
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
  }

  export type JogoCreateWithoutProfilesInput = {
    id?: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    genero?: GeneroCreateNestedManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosCreateNestedManyWithoutJogoInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoUncheckedCreateWithoutProfilesInput = {
    id?: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    genero?: GeneroUncheckedCreateNestedManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosUncheckedCreateNestedManyWithoutJogoInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoCreateOrConnectWithoutProfilesInput = {
    where: JogoWhereUniqueInput
    create: XOR<JogoCreateWithoutProfilesInput, JogoUncheckedCreateWithoutProfilesInput>
  }

  export type JogosFavoritosCreateWithoutProfileInput = {
    id?: string
    jogo: JogoCreateNestedOneWithoutJogoFavoritoInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogosFavoritosUncheckedCreateWithoutProfileInput = {
    id?: string
    jogoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogosFavoritosCreateOrConnectWithoutProfileInput = {
    where: JogosFavoritosWhereUniqueInput
    create: XOR<JogosFavoritosCreateWithoutProfileInput, JogosFavoritosUncheckedCreateWithoutProfileInput>
  }

  export type JogosFavoritosCreateManyProfileInputEnvelope = {
    data: Enumerable<JogosFavoritosCreateManyProfileInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProfilesInput = {
    update: XOR<UserUpdateWithoutProfilesInput, UserUncheckedUpdateWithoutProfilesInput>
    create: XOR<UserCreateWithoutProfilesInput, UserUncheckedCreateWithoutProfilesInput>
  }

  export type UserUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUpsertWithWhereUniqueWithoutProfilesInput = {
    where: JogoWhereUniqueInput
    update: XOR<JogoUpdateWithoutProfilesInput, JogoUncheckedUpdateWithoutProfilesInput>
    create: XOR<JogoCreateWithoutProfilesInput, JogoUncheckedCreateWithoutProfilesInput>
  }

  export type JogoUpdateWithWhereUniqueWithoutProfilesInput = {
    where: JogoWhereUniqueInput
    data: XOR<JogoUpdateWithoutProfilesInput, JogoUncheckedUpdateWithoutProfilesInput>
  }

  export type JogoUpdateManyWithWhereWithoutProfilesInput = {
    where: JogoScalarWhereInput
    data: XOR<JogoUpdateManyMutationInput, JogoUncheckedUpdateManyWithoutJogosInput>
  }

  export type JogosFavoritosUpsertWithWhereUniqueWithoutProfileInput = {
    where: JogosFavoritosWhereUniqueInput
    update: XOR<JogosFavoritosUpdateWithoutProfileInput, JogosFavoritosUncheckedUpdateWithoutProfileInput>
    create: XOR<JogosFavoritosCreateWithoutProfileInput, JogosFavoritosUncheckedCreateWithoutProfileInput>
  }

  export type JogosFavoritosUpdateWithWhereUniqueWithoutProfileInput = {
    where: JogosFavoritosWhereUniqueInput
    data: XOR<JogosFavoritosUpdateWithoutProfileInput, JogosFavoritosUncheckedUpdateWithoutProfileInput>
  }

  export type JogosFavoritosUpdateManyWithWhereWithoutProfileInput = {
    where: JogosFavoritosScalarWhereInput
    data: XOR<JogosFavoritosUpdateManyMutationInput, JogosFavoritosUncheckedUpdateManyWithoutJogoFavoritoInput>
  }

  export type ProfilesCreateWithoutJogoFavoritoInput = {
    id?: string
    title: string
    ImageURL: string
    User: UserCreateNestedOneWithoutProfilesInput
    jogos?: JogoCreateNestedManyWithoutProfilesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesUncheckedCreateWithoutJogoFavoritoInput = {
    id?: string
    title: string
    ImageURL: string
    userId: string
    jogos?: JogoUncheckedCreateNestedManyWithoutProfilesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesCreateOrConnectWithoutJogoFavoritoInput = {
    where: ProfilesWhereUniqueInput
    create: XOR<ProfilesCreateWithoutJogoFavoritoInput, ProfilesUncheckedCreateWithoutJogoFavoritoInput>
  }

  export type JogoCreateWithoutJogoFavoritoInput = {
    id?: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    genero?: GeneroCreateNestedManyWithoutJogosInput
    Profiles?: ProfilesCreateNestedManyWithoutJogosInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoUncheckedCreateWithoutJogoFavoritoInput = {
    id?: string
    title: string
    coverImageUrl: string
    description: string
    year: string
    imdbScore: string
    trailerYouTubeUrl: string
    gameplayYouTubeUrl: string
    genero?: GeneroUncheckedCreateNestedManyWithoutJogosInput
    Profiles?: ProfilesUncheckedCreateNestedManyWithoutJogosInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoCreateOrConnectWithoutJogoFavoritoInput = {
    where: JogoWhereUniqueInput
    create: XOR<JogoCreateWithoutJogoFavoritoInput, JogoUncheckedCreateWithoutJogoFavoritoInput>
  }

  export type ProfilesUpsertWithoutJogoFavoritoInput = {
    update: XOR<ProfilesUpdateWithoutJogoFavoritoInput, ProfilesUncheckedUpdateWithoutJogoFavoritoInput>
    create: XOR<ProfilesCreateWithoutJogoFavoritoInput, ProfilesUncheckedCreateWithoutJogoFavoritoInput>
  }

  export type ProfilesUpdateWithoutJogoFavoritoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutProfilesInput
    jogos?: JogoUpdateManyWithoutProfilesInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesUncheckedUpdateWithoutJogoFavoritoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jogos?: JogoUncheckedUpdateManyWithoutProfilesInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUpsertWithoutJogoFavoritoInput = {
    update: XOR<JogoUpdateWithoutJogoFavoritoInput, JogoUncheckedUpdateWithoutJogoFavoritoInput>
    create: XOR<JogoCreateWithoutJogoFavoritoInput, JogoUncheckedCreateWithoutJogoFavoritoInput>
  }

  export type JogoUpdateWithoutJogoFavoritoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    genero?: GeneroUpdateManyWithoutJogosInput
    Profiles?: ProfilesUpdateManyWithoutJogosInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUncheckedUpdateWithoutJogoFavoritoInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    genero?: GeneroUncheckedUpdateManyWithoutJogosInput
    Profiles?: ProfilesUncheckedUpdateManyWithoutJogosInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosCreateManyJogoInput = {
    id?: string
    perfilId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneroUpdateWithoutJogosInput = {
    id?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneroUncheckedUpdateWithoutJogosInput = {
    id?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneroUncheckedUpdateManyWithoutGeneroInput = {
    id?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesUpdateWithoutJogosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutProfilesInput
    jogoFavorito?: JogosFavoritosUpdateManyWithoutProfileInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesUncheckedUpdateWithoutJogosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jogoFavorito?: JogosFavoritosUncheckedUpdateManyWithoutProfileInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesUncheckedUpdateManyWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosUpdateWithoutJogoInput = {
    id?: StringFieldUpdateOperationsInput | string
    profile?: ProfilesUpdateOneRequiredWithoutJogoFavoritoInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosUncheckedUpdateWithoutJogoInput = {
    id?: StringFieldUpdateOperationsInput | string
    perfilId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosUncheckedUpdateManyWithoutJogoFavoritoInput = {
    id?: StringFieldUpdateOperationsInput | string
    perfilId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUpdateWithoutGeneroInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    Profiles?: ProfilesUpdateManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosUpdateManyWithoutJogoInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUncheckedUpdateWithoutGeneroInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    Profiles?: ProfilesUncheckedUpdateManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosUncheckedUpdateManyWithoutJogoInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUncheckedUpdateManyWithoutJogosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesCreateManyUserInput = {
    id?: string
    title: string
    ImageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfilesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    jogos?: JogoUpdateManyWithoutProfilesInput
    jogoFavorito?: JogosFavoritosUpdateManyWithoutProfileInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    ImageURL?: StringFieldUpdateOperationsInput | string
    jogos?: JogoUncheckedUpdateManyWithoutProfilesInput
    jogoFavorito?: JogosFavoritosUncheckedUpdateManyWithoutProfileInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosCreateManyProfileInput = {
    id?: string
    jogoId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JogoUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    genero?: GeneroUpdateManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosUpdateManyWithoutJogoInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogoUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    imdbScore?: StringFieldUpdateOperationsInput | string
    trailerYouTubeUrl?: StringFieldUpdateOperationsInput | string
    gameplayYouTubeUrl?: StringFieldUpdateOperationsInput | string
    genero?: GeneroUncheckedUpdateManyWithoutJogosInput
    jogoFavorito?: JogosFavoritosUncheckedUpdateManyWithoutJogoInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    jogo?: JogoUpdateOneRequiredWithoutJogoFavoritoInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JogosFavoritosUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    jogoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}